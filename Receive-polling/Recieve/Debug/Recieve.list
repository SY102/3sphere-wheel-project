
Recieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005100  08005100  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005100  08005100  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005100  08005100  00006100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005108  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  0800516c  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800516c  000072bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db75  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2b  00000000  00000000  00014c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00016b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd9  00000000  00000000  00017a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187b9  00000000  00000000  00018631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f626  00000000  00000000  00030dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d176  00000000  00000000  00040410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  000cd5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d1cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08005034 	.word	0x08005034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08005034 	.word	0x08005034

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <csn_high+0x14>)
 800073e:	f001 fd71 	bl	8002224 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40010800 	.word	0x40010800

0800074c <csn_low>:



void csn_low(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <csn_low+0x14>)
 8000756:	f001 fd65 	bl	8002224 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800

08000764 <ce_high>:

void ce_high(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	4802      	ldr	r0, [pc, #8]	@ (8000778 <ce_high+0x14>)
 8000770:	f001 fd58 	bl	8002224 <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40010800 	.word	0x40010800

0800077c <ce_low>:

void ce_low(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000786:	4802      	ldr	r0, [pc, #8]	@ (8000790 <ce_low+0x14>)
 8000788:	f001 fd4c 	bl	8002224 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010800 	.word	0x40010800

08000794 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80007ae:	f7ff ffcd 	bl	800074c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80007b2:	f107 010f 	add.w	r1, r7, #15
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	2201      	movs	r2, #1
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <nrf24_w_reg+0x4c>)
 80007be:	f002 f9dd 	bl	8002b7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <nrf24_w_reg+0x4c>)
 80007ce:	f002 f9d5 	bl	8002b7c <HAL_SPI_Transmit>

	csn_high();
 80007d2:	f7ff ffaf 	bl	8000734 <csn_high>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000080 	.word	0x20000080

080007e4 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73bb      	strb	r3, [r7, #14]

	csn_low();
 80007fc:	f7ff ffa6 	bl	800074c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000800:	f107 010f 	add.w	r1, r7, #15
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	2201      	movs	r2, #1
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <nrf24_r_reg+0x4c>)
 800080c:	f002 f9b6 	bl	8002b7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f107 010e 	add.w	r1, r7, #14
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <nrf24_r_reg+0x4c>)
 800081e:	f002 faf1 	bl	8002e04 <HAL_SPI_Receive>

	csn_high();
 8000822:	f7ff ff87 	bl	8000734 <csn_high>

	return data;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000080 	.word	0x20000080

08000834 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000844:	2201      	movs	r2, #1
 8000846:	4803      	ldr	r0, [pc, #12]	@ (8000854 <nrf24_w_spec_cmd+0x20>)
 8000848:	f002 f998 	bl	8002b7c <HAL_SPI_Transmit>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000080 	.word	0x20000080

08000858 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000862:	2101      	movs	r1, #1
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ffbd 	bl	80007e4 <nrf24_r_reg>
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff ff88 	bl	8000794 <nrf24_w_reg>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ffa3 	bl	80007e4 <nrf24_r_reg>
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f023 0302 	bic.w	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff6e 	bl	8000794 <nrf24_w_reg>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2006      	movs	r0, #6
 80008d2:	f7ff ff87 	bl	80007e4 <nrf24_r_reg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b25a      	sxtb	r2, r3
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 80008f8:	f107 030f 	add.w	r3, r7, #15
 80008fc:	2201      	movs	r2, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	2006      	movs	r0, #6
 8000902:	f7ff ff47 	bl	8000794 <nrf24_w_reg>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 800091c:	2101      	movs	r1, #1
 800091e:	2006      	movs	r0, #6
 8000920:	f7ff ff60 	bl	80007e4 <nrf24_r_reg>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800092e:	b2db      	uxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d105      	bne.n	8000944 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e007      	b.n	8000954 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d104      	bne.n	8000954 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	b2db      	uxtb	r3, r3
 8000952:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000954:	f107 030f 	add.w	r3, r7, #15
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	2006      	movs	r0, #6
 800095e:	f7ff ff19 	bl	8000794 <nrf24_w_reg>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	2005      	movs	r0, #5
 800097c:	f7ff ff0a 	bl	8000794 <nrf24_w_reg>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <nrf24_pipe_pld_size>:

void nrf24_open_tx_pipe(uint8_t *addr){
	nrf24_w_reg(TX_ADDR, addr, 5);
}

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b20      	cmp	r3, #32
 800099c:	d901      	bls.n	80009a2 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 800099e:	2320      	movs	r3, #32
 80009a0:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d839      	bhi.n	8000a1c <nrf24_pipe_pld_size+0x94>
 80009a8:	a201      	add	r2, pc, #4	@ (adr r2, 80009b0 <nrf24_pipe_pld_size+0x28>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009c9 	.word	0x080009c9
 80009b4:	080009d7 	.word	0x080009d7
 80009b8:	080009e5 	.word	0x080009e5
 80009bc:	080009f3 	.word	0x080009f3
 80009c0:	08000a01 	.word	0x08000a01
 80009c4:	08000a0f 	.word	0x08000a0f
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff fee0 	bl	8000794 <nrf24_w_reg>

		break;
 80009d4:	e022      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	2201      	movs	r2, #1
 80009da:	4619      	mov	r1, r3
 80009dc:	2012      	movs	r0, #18
 80009de:	f7ff fed9 	bl	8000794 <nrf24_w_reg>

		break;
 80009e2:	e01b      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	2013      	movs	r0, #19
 80009ec:	f7ff fed2 	bl	8000794 <nrf24_w_reg>

		break;
 80009f0:	e014      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 80009f2:	1dbb      	adds	r3, r7, #6
 80009f4:	2201      	movs	r2, #1
 80009f6:	4619      	mov	r1, r3
 80009f8:	2014      	movs	r0, #20
 80009fa:	f7ff fecb 	bl	8000794 <nrf24_w_reg>

		break;
 80009fe:	e00d      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	2015      	movs	r0, #21
 8000a08:	f7ff fec4 	bl	8000794 <nrf24_w_reg>

		break;
 8000a0c:	e006      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	2016      	movs	r0, #22
 8000a16:	f7ff febd 	bl	8000794 <nrf24_w_reg>

		break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 8000a34:	2101      	movs	r1, #1
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fed4 	bl	80007e4 <nrf24_r_reg>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	d850      	bhi.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
 8000a46:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <nrf24_open_rx_pipe+0x28>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a7b 	.word	0x08000a7b
 8000a54:	08000a91 	.word	0x08000a91
 8000a58:	08000aa7 	.word	0x08000aa7
 8000a5c:	08000abd 	.word	0x08000abd
 8000a60:	08000ad3 	.word	0x08000ad3
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8000a64:	2205      	movs	r2, #5
 8000a66:	6839      	ldr	r1, [r7, #0]
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f7ff fe93 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	73fb      	strb	r3, [r7, #15]
		break;
 8000a78:	e036      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	200b      	movs	r0, #11
 8000a80:	f7ff fe88 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a8e:	e02b      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff fe7d 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
		break;
 8000aa4:	e020      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	6839      	ldr	r1, [r7, #0]
 8000aaa:	200d      	movs	r0, #13
 8000aac:	f7ff fe72 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
		break;
 8000aba:	e015      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	200e      	movs	r0, #14
 8000ac2:	f7ff fe67 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73fb      	strb	r3, [r7, #15]
		break;
 8000ad0:	e00a      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	6839      	ldr	r1, [r7, #0]
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff fe5c 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ae6:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000ae8:	f107 030f 	add.w	r3, r7, #15
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	2002      	movs	r0, #2
 8000af2:	f7ff fe4f 	bl	8000794 <nrf24_w_reg>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop

08000b00 <nrf24_cls_rx_pipe>:

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe69 	bl	80007e4 <nrf24_r_reg>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000b30:	f107 030f 	add.w	r3, r7, #15
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fe2b 	bl	8000794 <nrf24_w_reg>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	4613      	mov	r3, r2
 8000b54:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8000b56:	2101      	movs	r1, #1
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fe43 	bl	80007e4 <nrf24_r_reg>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f023 030c 	bic.w	r3, r3, #12
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8000b8c:	f107 030f 	add.w	r3, r7, #15
 8000b90:	2201      	movs	r2, #1
 8000b92:	4619      	mov	r1, r3
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fdfd 	bl	8000794 <nrf24_w_reg>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fdea 	bl	8000794 <nrf24_w_reg>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	csn_low();
 8000bcc:	f7ff fdbe 	bl	800074c <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000bd0:	20e1      	movs	r0, #225	@ 0xe1
 8000bd2:	f7ff fe2f 	bl	8000834 <nrf24_w_spec_cmd>
	csn_high();
 8000bd6:	f7ff fdad 	bl	8000734 <csn_high>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
	csn_low();
 8000be2:	f7ff fdb3 	bl	800074c <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000be6:	20e2      	movs	r0, #226	@ 0xe2
 8000be8:	f7ff fe24 	bl	8000834 <nrf24_w_spec_cmd>
	csn_high();
 8000bec:	f7ff fda2 	bl	8000734 <csn_high>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000bfe:	23ff      	movs	r3, #255	@ 0xff
 8000c00:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000c02:	f7ff fda3 	bl	800074c <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	1db9      	adds	r1, r7, #6
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <nrf24_r_status+0x34>)
 8000c14:	f002 fa0f 	bl	8003036 <HAL_SPI_TransmitReceive>
	csn_high();
 8000c18:	f7ff fd8c 	bl	8000734 <csn_high>

	return data;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000080 	.word	0x20000080

08000c2c <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c36:	f7ff ffdd 	bl	8000bf4 <nrf24_r_status>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f7ff fda0 	bl	8000794 <nrf24_w_reg>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c66:	f7ff ffc5 	bl	8000bf4 <nrf24_r_status>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f043 0320 	orr.w	r3, r3, #32
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f7ff fd88 	bl	8000794 <nrf24_w_reg>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c96:	f7ff ffad 	bl	8000bf4 <nrf24_r_status>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f7ff fd70 	bl	8000794 <nrf24_w_reg>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fd8b 	bl	80007e4 <nrf24_r_reg>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fd56 	bl	8000794 <nrf24_w_reg>

	ce_high();
 8000ce8:	f7ff fd3c 	bl	8000764 <ce_high>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <nrf24_stop_listen>:

void nrf24_stop_listen(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fd6f 	bl	80007e4 <nrf24_r_reg>
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fd3a 	bl	8000794 <nrf24_w_reg>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	201d      	movs	r0, #29
 8000d36:	f7ff fd55 	bl	80007e4 <nrf24_r_reg>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d105      	bne.n	8000d50 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e004      	b.n	8000d5a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000d5a:	f107 030f 	add.w	r3, r7, #15
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	201d      	movs	r0, #29
 8000d64:	f7ff fd16 	bl	8000794 <nrf24_w_reg>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 8000d80:	2101      	movs	r1, #1
 8000d82:	201c      	movs	r0, #28
 8000d84:	f7ff fd2e 	bl	80007e4 <nrf24_r_reg>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d901      	bls.n	8000d96 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e00c      	b.n	8000dce <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2201      	movs	r2, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 8000dce:	f107 030f 	add.w	r3, r7, #15
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f7ff fcdc 	bl	8000794 <nrf24_w_reg>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d901      	bls.n	8000dfe <nrf24_auto_ack+0x1a>
		pipe = 5;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000dfe:	2101      	movs	r1, #1
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fcef 	bl	80007e4 <nrf24_r_reg>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2201      	movs	r2, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e00c      	b.n	8000e42 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fca2 	bl	8000794 <nrf24_w_reg>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000e62:	2101      	movs	r1, #1
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fcbd 	bl	80007e4 <nrf24_r_reg>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000e74:	233f      	movs	r3, #63	@ 0x3f
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fc84 	bl	8000794 <nrf24_w_reg>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	201d      	movs	r0, #29
 8000ea2:	f7ff fc9f 	bl	80007e4 <nrf24_r_reg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e004      	b.n	8000ec6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f023 0302 	bic.w	r3, r3, #2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f7ff fc60 	bl	8000794 <nrf24_w_reg>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	201d      	movs	r0, #29
 8000eea:	f7ff fc7b 	bl	80007e4 <nrf24_r_reg>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	201d      	movs	r0, #29
 8000f18:	f7ff fc3c 	bl	8000794 <nrf24_w_reg>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2004      	movs	r0, #4
 8000f32:	f7ff fc57 	bl	80007e4 <nrf24_r_reg>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000f58:	f107 030f 	add.w	r3, r7, #15
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff fc17 	bl	8000794 <nrf24_w_reg>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f7ff fc32 	bl	80007e4 <nrf24_r_reg>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f023 030f 	bic.w	r3, r3, #15
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f7ff fbf7 	bl	8000794 <nrf24_w_reg>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	2017      	movs	r0, #23
 8000fb8:	f7ff fc14 	bl	80007e4 <nrf24_r_reg>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <nrf24_data_available+0x20>
		return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <nrf24_data_available+0x22>
	}

	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8000fe4:	2361      	movs	r3, #97	@ 0x61
 8000fe6:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000fe8:	f7ff fbb0 	bl	800074c <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fec:	f107 010f 	add.w	r1, r7, #15
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <nrf24_receive+0x44>)
 8000ff8:	f001 fdc0 	bl	8002b7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <nrf24_receive+0x44>)
 8001008:	f001 fefc 	bl	8002e04 <HAL_SPI_Receive>
	csn_high();
 800100c:	f7ff fb92 	bl	8000734 <csn_high>

	nrf24_clear_rx_dr();
 8001010:	f7ff fe0c 	bl	8000c2c <nrf24_clear_rx_dr>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000080 	.word	0x20000080

08001020 <nrf24_defaults>:

void nrf24_defaults(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	ce_low();
 8001026:	f7ff fba9 	bl	800077c <ce_low>

	nrf24_pwr_dwn();
 800102a:	f7ff fc2f 	bl	800088c <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 800102e:	2003      	movs	r0, #3
 8001030:	f7ff fc46 	bl	80008c0 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fc6a 	bl	800090e <nrf24_data_rate>
	nrf24_set_channel(2);
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff fc95 	bl	800096a <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8001040:	2100      	movs	r1, #0
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fd7f 	bl	8000b46 <nrf24_set_crc>
	nrf24_set_addr_width(5);
 8001048:	2005      	movs	r0, #5
 800104a:	f7ff fdaa 	bl	8000ba2 <nrf24_set_addr_width>
	nrf24_flush_tx();
 800104e:	f7ff fdbb 	bl	8000bc8 <nrf24_flush_tx>
	nrf24_flush_rx();
 8001052:	f7ff fdc4 	bl	8000bde <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 8001056:	f7ff fde9 	bl	8000c2c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800105a:	f7ff fdff 	bl	8000c5c <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 800105e:	f7ff fe15 	bl	8000c8c <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8001062:	f7ff fe47 	bl	8000cf4 <nrf24_stop_listen>
	nrf24_dpl(disable);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fe5e 	bl	8000d28 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff11 	bl	8000e94 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ff32 	bl	8000edc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff ff53 	bl	8000f24 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff ff75 	bl	8000f6e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 8001084:	2300      	movs	r3, #0
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	e015      	b.n	80010b6 <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fc7a 	bl	8000988 <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fd32 	bl	8000b00 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe65 	bl	8000d70 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2101      	movs	r1, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe9a 	bl	8000de4 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d9e6      	bls.n	800108a <nrf24_defaults+0x6a>
	}

	ce_high();
 80010bc:	f7ff fb52 	bl	8000764 <ce_high>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <nrf24_init>:

void nrf24_init(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80010cc:	f7ff fbc4 	bl	8000858 <nrf24_pwr_up>

	nrf24_flush_tx();
 80010d0:	f7ff fd7a 	bl	8000bc8 <nrf24_flush_tx>
	nrf24_flush_rx();
 80010d4:	f7ff fd83 	bl	8000bde <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80010d8:	f7ff fda8 	bl	8000c2c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80010dc:	f7ff fdbe 	bl	8000c5c <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80010e0:	f7ff fdd4 	bl	8000c8c <nrf24_clear_max_rt>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fc46 	bl	8000988 <nrf24_pipe_pld_size>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b096      	sub	sp, #88	@ 0x58
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f000 fd9d 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f879 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f000 f9d5 	bl	80014c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001116:	f000 f8bb 	bl	8001290 <MX_SPI1_Init>
  MX_TIM1_Init();
 800111a:	f000 f8ef 	bl	80012fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800111e:	f000 f9a5 	bl	800146c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001122:	2104      	movs	r1, #4
 8001124:	4833      	ldr	r0, [pc, #204]	@ (80011f4 <main+0xf0>)
 8001126:	f002 fae1 	bl	80036ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800112a:	2108      	movs	r1, #8
 800112c:	4831      	ldr	r0, [pc, #196]	@ (80011f4 <main+0xf0>)
 800112e:	f002 fadd 	bl	80036ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001132:	210c      	movs	r1, #12
 8001134:	482f      	ldr	r0, [pc, #188]	@ (80011f4 <main+0xf0>)
 8001136:	f002 fad9 	bl	80036ec <HAL_TIM_PWM_Start>

  // nRF24 초기화 (수신기)
  nrf24_init();
 800113a:	f7ff ffc5 	bl	80010c8 <nrf24_init>
  nrf24_receiver_setup();
 800113e:	f000 fa0b 	bl	8001558 <nrf24_receiver_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t rawX = ADC_NEU, rawY = ADC_NEU, rawZ = ADC_NEU;
 8001142:	f240 73da 	movw	r3, #2010	@ 0x7da
 8001146:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800114a:	f240 73da 	movw	r3, #2010	@ 0x7da
 800114e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8001152:	f240 73da 	movw	r3, #2010	@ 0x7da
 8001156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	  if(try_receive_nrf24(&rawX, &rawY, &rawZ)){
 800115a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800115e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001162:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa28 	bl	80015bc <try_receive_nrf24>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d026      	beq.n	80011c0 <main+0xbc>
		  float vx = NormalizeADC((int16_t)rawX); // 부호 있어야함
 8001172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001176:	b21b      	sxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fa68 	bl	800164e <NormalizeADC>
 800117e:	6538      	str	r0, [r7, #80]	@ 0x50
		  float vy = NormalizeADC((int16_t)rawY);
 8001180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001184:	b21b      	sxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa61 	bl	800164e <NormalizeADC>
 800118c:	64f8      	str	r0, [r7, #76]	@ 0x4c
		  float omega = NormalizeADC((int16_t)rawZ);
 800118e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001192:	b21b      	sxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fa5a 	bl	800164e <NormalizeADC>
 800119a:	64b8      	str	r0, [r7, #72]	@ 0x48

		  KiwiDrive(vx, vy, omega);
 800119c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800119e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80011a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80011a2:	f000 fad1 	bl	8001748 <KiwiDrive>
		  DebugUART(rawX, rawY, rawZ);
 80011a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80011aa:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80011ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fb58 	bl	8001868 <DebugUART>
		  no_signal_count = 0;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <main+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e014      	b.n	80011ea <main+0xe6>
	  }else{
		  // 통신 실패처리
		  no_signal_count++;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <main+0xf4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a0c      	ldr	r2, [pc, #48]	@ (80011f8 <main+0xf4>)
 80011c8:	6013      	str	r3, [r2, #0]
		  char buf[64];
		  int len = snprintf(buf, sizeof(buf),
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <main+0xf4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4638      	mov	r0, r7
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <main+0xf8>)
 80011d2:	2140      	movs	r1, #64	@ 0x40
 80011d4:	f003 fa3a 	bl	800464c <sniprintf>
 80011d8:	6578      	str	r0, [r7, #84]	@ 0x54
				"No Signal: %lu\n", no_signal_count);

		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 80011da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4639      	mov	r1, r7
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	4806      	ldr	r0, [pc, #24]	@ (8001200 <main+0xfc>)
 80011e6:	f003 f85c 	bl	80042a2 <HAL_UART_Transmit>
	  }
	  HAL_Delay(20);
 80011ea:	2014      	movs	r0, #20
 80011ec:	f000 fd8e 	bl	8001d0c <HAL_Delay>
  {
 80011f0:	e7a7      	b.n	8001142 <main+0x3e>
 80011f2:	bf00      	nop
 80011f4:	200000d8 	.word	0x200000d8
 80011f8:	20000168 	.word	0x20000168
 80011fc:	0800504c 	.word	0x0800504c
 8001200:	20000120 	.word	0x20000120

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b090      	sub	sp, #64	@ 0x40
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	2228      	movs	r2, #40	@ 0x28
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fa50 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800122a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800122e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001240:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001242:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f001 f801 	bl	8002254 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001258:	f000 fb4a 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2302      	movs	r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fa6e 	bl	8002758 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001282:	f000 fb35 	bl	80018f0 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	@ 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001294:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_SPI1_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	@ (80012f8 <MX_SPI1_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <MX_SPI1_Init+0x64>)
 800129c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012c4:	2218      	movs	r2, #24
 80012c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012dc:	220a      	movs	r2, #10
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <MX_SPI1_Init+0x64>)
 80012e2:	f001 fbc7 	bl	8002a74 <HAL_SPI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012ec:	f000 fb00 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000080 	.word	0x20000080
 80012f8:	40013000 	.word	0x40013000

080012fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	@ 0x58
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f003 f9bf 	bl	80046b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800133a:	4b4a      	ldr	r3, [pc, #296]	@ (8001464 <MX_TIM1_Init+0x168>)
 800133c:	4a4a      	ldr	r2, [pc, #296]	@ (8001468 <MX_TIM1_Init+0x16c>)
 800133e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001340:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001342:	2247      	movs	r2, #71	@ 0x47
 8001344:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <MX_TIM1_Init+0x168>)
 800134e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001352:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <MX_TIM1_Init+0x168>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001366:	483f      	ldr	r0, [pc, #252]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001368:	f002 f919 	bl	800359e <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001372:	f000 fabd 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001380:	4619      	mov	r1, r3
 8001382:	4838      	ldr	r0, [pc, #224]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001384:	f002 fb16 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800138e:	f000 faaf 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001392:	4834      	ldr	r0, [pc, #208]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001394:	f002 f952 	bl	800363c <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800139e:	f000 faa7 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ae:	4619      	mov	r1, r3
 80013b0:	482c      	ldr	r0, [pc, #176]	@ (8001464 <MX_TIM1_Init+0x168>)
 80013b2:	f002 fe77 	bl	80040a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013bc:	f000 fa98 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	@ 0x60
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	481f      	ldr	r0, [pc, #124]	@ (8001464 <MX_TIM1_Init+0x168>)
 80013e6:	f002 fa23 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013f0:	f000 fa7e 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	2208      	movs	r2, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	4819      	ldr	r0, [pc, #100]	@ (8001464 <MX_TIM1_Init+0x168>)
 80013fe:	f002 fa17 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001408:	f000 fa72 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	220c      	movs	r2, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001416:	f002 fa0b 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001420:	f000 fa66 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001448:	f002 fe8a 	bl	8004160 <HAL_TIMEx_ConfigBreakDeadTime>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001452:	f000 fa4d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001456:	4803      	ldr	r0, [pc, #12]	@ (8001464 <MX_TIM1_Init+0x168>)
 8001458:	f000 faea 	bl	8001a30 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3758      	adds	r7, #88	@ 0x58
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000d8 	.word	0x200000d8
 8001468:	40012c00 	.word	0x40012c00

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_USART2_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f002 fead 	bl	8004202 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 fa1f 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000120 	.word	0x20000120
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_GPIO_Init+0x90>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <MX_GPIO_Init+0x90>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <MX_GPIO_Init+0x90>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_GPIO_Init+0x90>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|CE_Pin_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f240 1101 	movw	r1, #257	@ 0x101
 8001522:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_GPIO_Init+0x94>)
 8001524:	f000 fe7e 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin_Pin CE_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8001528:	f240 1301 	movw	r3, #257	@ 0x101
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2302      	movs	r3, #2
 8001538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0x94>)
 8001542:	f000 fceb 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <nrf24_receiver_setup>:

/* USER CODE BEGIN 4 */
void nrf24_receiver_setup(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    nrf24_defaults();                               //레지스터 기본값으로 리셋
 800155c:	f7ff fd60 	bl	8001020 <nrf24_defaults>
    HAL_Delay(5);                                   //전원, spi안정화 대기(최소 4.5ms이상 필요)
 8001560:	2005      	movs	r0, #5
 8001562:	f000 fbd3 	bl	8001d0c <HAL_Delay>
    nrf24_stop_listen();
 8001566:	f7ff fbc5 	bl	8000cf4 <nrf24_stop_listen>
    nrf24_pwr_up();
 800156a:	f7ff f975 	bl	8000858 <nrf24_pwr_up>
    HAL_Delay(2);
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fbcc 	bl	8001d0c <HAL_Delay>

    nrf24_flush_rx();
 8001574:	f7ff fb33 	bl	8000bde <nrf24_flush_rx>
    nrf24_flush_tx();
 8001578:	f7ff fb26 	bl	8000bc8 <nrf24_flush_tx>
    nrf24_clear_rx_dr();
 800157c:	f7ff fb56 	bl	8000c2c <nrf24_clear_rx_dr>
    nrf24_clear_tx_ds();
 8001580:	f7ff fb6c 	bl	8000c5c <nrf24_clear_tx_ds>
    nrf24_clear_max_rt();
 8001584:	f7ff fb82 	bl	8000c8c <nrf24_clear_max_rt>

    nrf24_set_channel(40); //무선 채널 40설정
 8001588:	2028      	movs	r0, #40	@ 0x28
 800158a:	f7ff f9ee 	bl	800096a <nrf24_set_channel>
    nrf24_data_rate(_1mbps);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff f9bd 	bl	800090e <nrf24_data_rate>
    nrf24_auto_ack_all(disable);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fc5f 	bl	8000e58 <nrf24_auto_ack_all>
    nrf24_dpl(disable); //ack 비활성화
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fbc4 	bl	8000d28 <nrf24_dpl>
    nrf24_set_payload_size(6);
 80015a0:	2006      	movs	r0, #6
 80015a2:	f7ff fda1 	bl	80010e8 <nrf24_set_payload_size>
    nrf24_open_rx_pipe(0, rx_address);              //파이프 0에 수신주소 설정
 80015a6:	4904      	ldr	r1, [pc, #16]	@ (80015b8 <nrf24_receiver_setup+0x60>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fa3b 	bl	8000a24 <nrf24_open_rx_pipe>
    nrf24_listen();                                 //CE=high => 실제 수신 대기모드 진입
 80015ae:	f7ff fb85 	bl	8000cbc <nrf24_listen>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000

080015bc <try_receive_nrf24>:


int try_receive_nrf24(uint16_t *rawX, uint16_t *rawY, uint16_t *rawZ){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
    if (!nrf24_data_available()){
 80015c8:	f7ff fcf1 	bl	8000fae <nrf24_data_available>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <try_receive_nrf24+0x1a>
    	return 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e037      	b.n	8001646 <try_receive_nrf24+0x8a>
    }

    uint8_t buf[6];
    nrf24_receive(buf, 6);
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2106      	movs	r1, #6
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fcfb 	bl	8000fd8 <nrf24_receive>

    *rawX = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 80015e2:	7e3b      	ldrb	r3, [r7, #24]
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7e7b      	ldrb	r3, [r7, #25]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	801a      	strh	r2, [r3, #0]
    *rawY = (uint16_t)buf[2] | ((uint16_t)buf[3] << 8);
 80015f8:	7ebb      	ldrb	r3, [r7, #26]
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7efb      	ldrb	r3, [r7, #27]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	b29a      	uxth	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	801a      	strh	r2, [r3, #0]
    *rawZ = (uint16_t)buf[4] | ((uint16_t)buf[5] << 8);
 800160e:	7f3b      	ldrb	r3, [r7, #28]
 8001610:	b21a      	sxth	r2, r3
 8001612:	7f7b      	ldrb	r3, [r7, #29]
 8001614:	b21b      	sxth	r3, r3
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	801a      	strh	r2, [r3, #0]

    nrf24_clear_rx_dr();
 8001624:	f7ff fb02 	bl	8000c2c <nrf24_clear_rx_dr>

    while(nrf24_data_available()) {
 8001628:	e007      	b.n	800163a <try_receive_nrf24+0x7e>
        uint8_t dummy[6];
        nrf24_receive(dummy, 6);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2106      	movs	r1, #6
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fcd1 	bl	8000fd8 <nrf24_receive>
        nrf24_clear_rx_dr();
 8001636:	f7ff faf9 	bl	8000c2c <nrf24_clear_rx_dr>
    while(nrf24_data_available()) {
 800163a:	f7ff fcb8 	bl	8000fae <nrf24_data_available>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f2      	bne.n	800162a <try_receive_nrf24+0x6e>
    }
    return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <NormalizeADC>:


float NormalizeADC(int16_t raw){
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	80fb      	strh	r3, [r7, #6]
    int16_t delta = raw - ADC_NEU;
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 800165e:	b29b      	uxth	r3, r3
 8001660:	81fb      	strh	r3, [r7, #14]

    if(abs(delta) < ADC_DEAD_ZONE){
 8001662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	bfb8      	it	lt
 800166a:	425b      	neglt	r3, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001670:	d802      	bhi.n	8001678 <NormalizeADC+0x2a>
        return 0.0f;
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e02a      	b.n	80016ce <NormalizeADC+0x80>
    }

    if(delta > 0) {
 8001678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dd13      	ble.n	80016a8 <NormalizeADC+0x5a>
        // CW 방향: 중간값~최대값 → 0~1
        return (float)delta / (float)(ADC_MAX - ADC_NEU);  // /2010
 8001680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fe1b 	bl	80002c0 <__aeabi_i2f>
 800168a:	4604      	mov	r4, r0
 800168c:	f640 73b4 	movw	r3, #4020	@ 0xfb4
 8001690:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fe13 	bl	80002c0 <__aeabi_i2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4619      	mov	r1, r3
 800169e:	4620      	mov	r0, r4
 80016a0:	f7fe ff16 	bl	80004d0 <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	e012      	b.n	80016ce <NormalizeADC+0x80>
    } else {
        // CCW 방향: 최소값~중간값 → -1~0
        return (float)delta / (float)(ADC_NEU - ADC_MIN);  // /2010
 80016a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fe07 	bl	80002c0 <__aeabi_i2f>
 80016b2:	4604      	mov	r4, r0
 80016b4:	2300      	movs	r3, #0
 80016b6:	f5c3 63fb 	rsb	r3, r3, #2008	@ 0x7d8
 80016ba:	3302      	adds	r3, #2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fdff 	bl	80002c0 <__aeabi_i2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7fe ff02 	bl	80004d0 <__aeabi_fdiv>
 80016cc:	4603      	mov	r3, r0
    }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
	...

080016d8 <ToPWMus>:

uint16_t ToPWMus(float v){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if(v > 1.0f){
 80016e0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fffb 	bl	80006e0 <__aeabi_fcmpgt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <ToPWMus+0x20>
		v = 1.0f;
 80016f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	e008      	b.n	800170a <ToPWMus+0x32>
	}else if(v < -1.0f){
 80016f8:	4910      	ldr	r1, [pc, #64]	@ (800173c <ToPWMus+0x64>)
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe ffd2 	bl	80006a4 <__aeabi_fcmplt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <ToPWMus+0x32>
		v = -1.0f;
 8001706:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <ToPWMus+0x64>)
 8001708:	607b      	str	r3, [r7, #4]
	}
	return(uint16_t)((v + 1.0f) * 500.0f + 1000.0f);
 800170a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fd22 	bl	8000158 <__addsf3>
 8001714:	4603      	mov	r3, r0
 8001716:	490a      	ldr	r1, [pc, #40]	@ (8001740 <ToPWMus+0x68>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fe25 	bl	8000368 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	4908      	ldr	r1, [pc, #32]	@ (8001744 <ToPWMus+0x6c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd18 	bl	8000158 <__addsf3>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ffe2 	bl	80006f4 <__aeabi_f2uiz>
 8001730:	4603      	mov	r3, r0
 8001732:	b29b      	uxth	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	bf800000 	.word	0xbf800000
 8001740:	43fa0000 	.word	0x43fa0000
 8001744:	447a0000 	.word	0x447a0000

08001748 <KiwiDrive>:

void KiwiDrive(float vx, float vy, float omega){
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	@ 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	float Rw = ROTATION_CONST * omega;
 8001754:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7fe fe05 	bl	8000368 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]

	float Mtop = 1.0f *vx + Rw;
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7fe fcf7 	bl	8000158 <__addsf3>
 800176a:	4603      	mov	r3, r0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
	float Mbl = 0.866f*vy -0.5f*vx + Rw;
 800176e:	493b      	ldr	r1, [pc, #236]	@ (800185c <KiwiDrive+0x114>)
 8001770:	68b8      	ldr	r0, [r7, #8]
 8001772:	f7fe fdf9 	bl	8000368 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	461c      	mov	r4, r3
 800177a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7fe fdf2 	bl	8000368 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7fe fce3 	bl	8000154 <__aeabi_fsub>
 800178e:	4603      	mov	r3, r0
 8001790:	4619      	mov	r1, r3
 8001792:	69b8      	ldr	r0, [r7, #24]
 8001794:	f7fe fce0 	bl	8000158 <__addsf3>
 8001798:	4603      	mov	r3, r0
 800179a:	623b      	str	r3, [r7, #32]
	float Mbr = -0.866f*vy -0.5f*vx + Rw;
 800179c:	4930      	ldr	r1, [pc, #192]	@ (8001860 <KiwiDrive+0x118>)
 800179e:	68b8      	ldr	r0, [r7, #8]
 80017a0:	f7fe fde2 	bl	8000368 <__aeabi_fmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461c      	mov	r4, r3
 80017a8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7fe fddb 	bl	8000368 <__aeabi_fmul>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7fe fccc 	bl	8000154 <__aeabi_fsub>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	69b8      	ldr	r0, [r7, #24]
 80017c2:	f7fe fcc9 	bl	8000158 <__addsf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	61fb      	str	r3, [r7, #28]

	float maxM = fmaxf(fabsf(Mtop), fmaxf(fabsf(Mbl), fabsf(Mbr)));
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f003 fbf8 	bl	8004fd4 <fmaxf>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4620      	mov	r0, r4
 80017ea:	f003 fbf3 	bl	8004fd4 <fmaxf>
 80017ee:	6178      	str	r0, [r7, #20]
	if (maxM > 1.0f) {
 80017f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7fe ff73 	bl	80006e0 <__aeabi_fcmpgt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d011      	beq.n	8001824 <KiwiDrive+0xdc>
	    Mtop /= maxM;
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001804:	f7fe fe64 	bl	80004d0 <__aeabi_fdiv>
 8001808:	4603      	mov	r3, r0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
	    Mbl  /= maxM;
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	6a38      	ldr	r0, [r7, #32]
 8001810:	f7fe fe5e 	bl	80004d0 <__aeabi_fdiv>
 8001814:	4603      	mov	r3, r0
 8001816:	623b      	str	r3, [r7, #32]
	    Mbr  /= maxM;
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	69f8      	ldr	r0, [r7, #28]
 800181c:	f7fe fe58 	bl	80004d0 <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	61fb      	str	r3, [r7, #28]
	}


	//PWM(us)변환 후 TIM1 채널에 출력
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ToPWMus(Mtop)); //PA9 TIM1_CH2
 8001824:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001826:	f7ff ff57 	bl	80016d8 <ToPWMus>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <KiwiDrive+0x11c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ToPWMus(Mbl));	 //PA10 TIM1_CH3
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff ff4f 	bl	80016d8 <ToPWMus>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <KiwiDrive+0x11c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, ToPWMus(Mbr));	 //PA11 TIM1_CH4
 8001844:	69f8      	ldr	r0, [r7, #28]
 8001846:	f7ff ff47 	bl	80016d8 <ToPWMus>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <KiwiDrive+0x11c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001854:	bf00      	nop
 8001856:	372c      	adds	r7, #44	@ 0x2c
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	3f5db22d 	.word	0x3f5db22d
 8001860:	bf5db22d 	.word	0xbf5db22d
 8001864:	200000d8 	.word	0x200000d8

08001868 <DebugUART>:


void DebugUART(uint16_t rawX, uint16_t rawY, uint16_t rawZ){
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	b0ad      	sub	sp, #180	@ 0xb4
 800186c:	af06      	add	r7, sp, #24
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
 8001872:	460b      	mov	r3, r1
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	807b      	strh	r3, [r7, #2]
	char buf[128];
	// 초기화된 채널 2, 3, 4에서 PWM 값을 읽어옴
	uint16_t pwm_ch2 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <DebugUART+0x7c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001880:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	uint16_t pwm_ch3 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_3);
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <DebugUART+0x7c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	uint16_t pwm_ch4 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_4);
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <DebugUART+0x7c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	int len = snprintf(buf, sizeof(buf),
 8001898:	88fe      	ldrh	r6, [r7, #6]
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	887a      	ldrh	r2, [r7, #2]
 800189e:	f8b7 1096 	ldrh.w	r1, [r7, #150]	@ 0x96
 80018a2:	f8b7 0094 	ldrh.w	r0, [r7, #148]	@ 0x94
 80018a6:	f8b7 4092 	ldrh.w	r4, [r7, #146]	@ 0x92
 80018aa:	f107 050c 	add.w	r5, r7, #12
 80018ae:	9404      	str	r4, [sp, #16]
 80018b0:	9003      	str	r0, [sp, #12]
 80018b2:	9102      	str	r1, [sp, #8]
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4633      	mov	r3, r6
 80018ba:	4a0b      	ldr	r2, [pc, #44]	@ (80018e8 <DebugUART+0x80>)
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	4628      	mov	r0, r5
 80018c0:	f002 fec4 	bl	800464c <sniprintf>
 80018c4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
			"X:%4u, Y:%4u, Z:%4u | M_top(CH2):%4u, M_bl(CH3):%4u, M_br(CH4):%4u\n",
			rawX, rawY, rawZ, pwm_ch2, pwm_ch3, pwm_ch4);

	HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 80018c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 010c 	add.w	r1, r7, #12
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <DebugUART+0x84>)
 80018d8:	f002 fce3 	bl	80042a2 <HAL_UART_Transmit>
}
 80018dc:	bf00      	nop
 80018de:	379c      	adds	r7, #156	@ 0x9c
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e4:	200000d8 	.word	0x200000d8
 80018e8:	0800505c 	.word	0x0800505c
 80018ec:	20000120 	.word	0x20000120

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <HAL_MspInit+0x5c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0e      	ldr	r2, [pc, #56]	@ (8001958 <HAL_MspInit+0x5c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_MspInit+0x60>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_MspInit+0x60>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <HAL_SPI_MspInit+0x88>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d12f      	bne.n	80019e0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 8001986:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a13      	ldr	r2, [pc, #76]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_SPI_MspInit+0x8c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019b0:	23a0      	movs	r3, #160	@ 0xa0
 80019b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <HAL_SPI_MspInit+0x90>)
 80019c4:	f000 faaa 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c8:	2340      	movs	r3, #64	@ 0x40
 80019ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_SPI_MspInit+0x90>)
 80019dc:	f000 fa9e 	bl	8001f1c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013000 	.word	0x40013000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010800 	.word	0x40010800

080019f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_TIM_Base_MspInit+0x34>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_TIM_Base_MspInit+0x38>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_TIM_Base_MspInit+0x38>)
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_TIM_Base_MspInit+0x38>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_TIM_MspPostInit+0x5c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d118      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_TIM_MspPostInit+0x60>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <HAL_TIM_MspPostInit+0x60>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_TIM_MspPostInit+0x60>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001a68:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <HAL_TIM_MspPostInit+0x64>)
 8001a7e:	f000 fa4d 	bl	8001f1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010800 	.word	0x40010800

08001a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d12f      	bne.n	8001b18 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	4a19      	ldr	r2, [pc, #100]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac2:	61d3      	str	r3, [r2, #28]
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <HAL_UART_MspInit+0x90>)
 8001afc:	f000 fa0e 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b00:	2308      	movs	r3, #8
 8001b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <HAL_UART_MspInit+0x90>)
 8001b14:	f000 fa02 	bl	8001f1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b18:	bf00      	nop
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010800 	.word	0x40010800

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <NMI_Handler+0x4>

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <MemManage_Handler+0x4>

08001b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7c:	f000 f8aa 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f002 fd88 	bl	80046c8 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20005000 	.word	0x20005000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	2000016c 	.word	0x2000016c
 8001bec:	200002c0 	.word	0x200002c0

08001bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff fff8 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c02:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a09      	ldr	r2, [pc, #36]	@ (8001c3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c18:	4c09      	ldr	r4, [pc, #36]	@ (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f002 fd55 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2a:	f7ff fa6b 	bl	8001104 <main>
  bx lr
 8001c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c38:	08005108 	.word	0x08005108
  ldr r2, =_sbss
 8001c3c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c40:	200002bc 	.word	0x200002bc

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_Init+0x28>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x28>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f92b 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	200f      	movs	r0, #15
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fe4a 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f935 	bl	8001f02 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 f90b 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	@ (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_IncTick+0x1c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a03      	ldr	r2, [pc, #12]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	20000170 	.word	0x20000170

08001cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	@ (8001d08 <HAL_GetTick+0x10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000170 	.word	0x20000170

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffe0 	bl	8001cf8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000010 	.word	0x20000010

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff90 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff49 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff5e 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff90 	bl	8001e0c <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5f 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffb0 	bl	8001e70 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b08b      	sub	sp, #44	@ 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e169      	b.n	8002204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f30:	2201      	movs	r2, #1
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8158 	bne.w	80021fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a9a      	ldr	r2, [pc, #616]	@ (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d05e      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f58:	4a98      	ldr	r2, [pc, #608]	@ (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d875      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f5e:	4a98      	ldr	r2, [pc, #608]	@ (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d058      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f64:	4a96      	ldr	r2, [pc, #600]	@ (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d86f      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f6a:	4a96      	ldr	r2, [pc, #600]	@ (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d052      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f70:	4a94      	ldr	r2, [pc, #592]	@ (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d869      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f76:	4a94      	ldr	r2, [pc, #592]	@ (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04c      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f7c:	4a92      	ldr	r2, [pc, #584]	@ (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d863      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f82:	4a92      	ldr	r2, [pc, #584]	@ (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d046      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f88:	4a90      	ldr	r2, [pc, #576]	@ (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d85d      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d82a      	bhi.n	8001fe8 <HAL_GPIO_Init+0xcc>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d859      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f96:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <HAL_GPIO_Init+0x80>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08001ff1 	.word	0x08001ff1
 8001fa4:	08002003 	.word	0x08002003
 8001fa8:	08002045 	.word	0x08002045
 8001fac:	0800204b 	.word	0x0800204b
 8001fb0:	0800204b 	.word	0x0800204b
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	0800204b 	.word	0x0800204b
 8001fbc:	0800204b 	.word	0x0800204b
 8001fc0:	0800204b 	.word	0x0800204b
 8001fc4:	0800204b 	.word	0x0800204b
 8001fc8:	0800204b 	.word	0x0800204b
 8001fcc:	0800204b 	.word	0x0800204b
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	0800204b 	.word	0x0800204b
 8001fd8:	0800204b 	.word	0x0800204b
 8001fdc:	0800204b 	.word	0x0800204b
 8001fe0:	08001ff9 	.word	0x08001ff9
 8001fe4:	0800200d 	.word	0x0800200d
 8001fe8:	4a79      	ldr	r2, [pc, #484]	@ (80021d0 <HAL_GPIO_Init+0x2b4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fee:	e02c      	b.n	800204a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e029      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e024      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	3308      	adds	r3, #8
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e01f      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	330c      	adds	r3, #12
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e01a      	b.n	800204c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201e:	2304      	movs	r3, #4
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e013      	b.n	800204c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	611a      	str	r2, [r3, #16]
          break;
 8002036:	e009      	b.n	800204c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002038:	2308      	movs	r3, #8
 800203a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	615a      	str	r2, [r3, #20]
          break;
 8002042:	e003      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x130>
          break;
 800204a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	@ 0xff
 8002050:	d801      	bhi.n	8002056 <HAL_GPIO_Init+0x13a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	e001      	b.n	800205a <HAL_GPIO_Init+0x13e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	@ 0xff
 8002060:	d802      	bhi.n	8002068 <HAL_GPIO_Init+0x14c>
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x152>
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	3b08      	subs	r3, #8
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	210f      	movs	r1, #15
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80b1 	beq.w	80021fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800209c:	4b4d      	ldr	r3, [pc, #308]	@ (80021d4 <HAL_GPIO_Init+0x2b8>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	@ (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b4:	4a48      	ldr	r2, [pc, #288]	@ (80021d8 <HAL_GPIO_Init+0x2bc>)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	@ (80021dc <HAL_GPIO_Init+0x2c0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3f      	ldr	r2, [pc, #252]	@ (80021e0 <HAL_GPIO_Init+0x2c4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1e8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3e      	ldr	r2, [pc, #248]	@ (80021e4 <HAL_GPIO_Init+0x2c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1e4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3d      	ldr	r2, [pc, #244]	@ (80021e8 <HAL_GPIO_Init+0x2cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1e0>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e006      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e004      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002100:	2302      	movs	r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002108:	2300      	movs	r3, #0
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4093      	lsls	r3, r2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211a:	492f      	ldr	r1, [pc, #188]	@ (80021d8 <HAL_GPIO_Init+0x2bc>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	492c      	ldr	r1, [pc, #176]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4928      	ldr	r1, [pc, #160]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4922      	ldr	r1, [pc, #136]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	491e      	ldr	r1, [pc, #120]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4918      	ldr	r1, [pc, #96]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4914      	ldr	r1, [pc, #80]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d021      	beq.n	80021f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	490e      	ldr	r1, [pc, #56]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e021      	b.n	80021fe <HAL_GPIO_Init+0x2e2>
 80021ba:	bf00      	nop
 80021bc:	10320000 	.word	0x10320000
 80021c0:	10310000 	.word	0x10310000
 80021c4:	10220000 	.word	0x10220000
 80021c8:	10210000 	.word	0x10210000
 80021cc:	10120000 	.word	0x10120000
 80021d0:	10110000 	.word	0x10110000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40011400 	.word	0x40011400
 80021ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4909      	ldr	r1, [pc, #36]	@ (8002220 <HAL_GPIO_Init+0x304>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	3301      	adds	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	f47f ae8e 	bne.w	8001f30 <HAL_GPIO_Init+0x14>
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	372c      	adds	r7, #44	@ 0x2c
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	611a      	str	r2, [r3, #16]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e272      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8087 	beq.w	8002382 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002274:	4b92      	ldr	r3, [pc, #584]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b04      	cmp	r3, #4
 800227e:	d00c      	beq.n	800229a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002280:	4b8f      	ldr	r3, [pc, #572]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d112      	bne.n	80022b2 <HAL_RCC_OscConfig+0x5e>
 800228c:	4b8c      	ldr	r3, [pc, #560]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002298:	d10b      	bne.n	80022b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	4b89      	ldr	r3, [pc, #548]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d06c      	beq.n	8002380 <HAL_RCC_OscConfig+0x12c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d168      	bne.n	8002380 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e24c      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x76>
 80022bc:	4b80      	ldr	r3, [pc, #512]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a7f      	ldr	r2, [pc, #508]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e02e      	b.n	8002328 <HAL_RCC_OscConfig+0xd4>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b7b      	ldr	r3, [pc, #492]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7a      	ldr	r2, [pc, #488]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b78      	ldr	r3, [pc, #480]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a77      	ldr	r2, [pc, #476]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e01d      	b.n	8002328 <HAL_RCC_OscConfig+0xd4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0xbc>
 80022f6:	4b72      	ldr	r3, [pc, #456]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a71      	ldr	r2, [pc, #452]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b6f      	ldr	r3, [pc, #444]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xd4>
 8002310:	4b6b      	ldr	r3, [pc, #428]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6a      	ldr	r2, [pc, #424]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b68      	ldr	r3, [pc, #416]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a67      	ldr	r2, [pc, #412]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002326:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fce2 	bl	8001cf8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff fcde 	bl	8001cf8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e200      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b5d      	ldr	r3, [pc, #372]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xe4>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff fcce 	bl	8001cf8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff fcca 	bl	8001cf8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1ec      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x10c>
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238e:	4b4c      	ldr	r3, [pc, #304]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d11c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x18c>
 80023a6:	4b46      	ldr	r3, [pc, #280]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x176>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e1c0      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4939      	ldr	r1, [pc, #228]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	e03a      	b.n	8002456 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e8:	4b36      	ldr	r3, [pc, #216]	@ (80024c4 <HAL_RCC_OscConfig+0x270>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff fc83 	bl	8001cf8 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7ff fc7f 	bl	8001cf8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1a1      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4927      	ldr	r1, [pc, #156]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <HAL_RCC_OscConfig+0x270>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fc62 	bl	8001cf8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002438:	f7ff fc5e 	bl	8001cf8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e180      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d03a      	beq.n	80024d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d019      	beq.n	800249e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7ff fc42 	bl	8001cf8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff fc3e 	bl	8001cf8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e160      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <HAL_RCC_OscConfig+0x26c>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002496:	2001      	movs	r0, #1
 8002498:	f000 face 	bl	8002a38 <RCC_Delay>
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7ff fc28 	bl	8001cf8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024aa:	e00f      	b.n	80024cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc24 	bl	8001cf8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d908      	bls.n	80024cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e146      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	42420000 	.word	0x42420000
 80024c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	4b92      	ldr	r3, [pc, #584]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e9      	bne.n	80024ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a6 	beq.w	8002632 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a87      	ldr	r2, [pc, #540]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b85      	ldr	r3, [pc, #532]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b82      	ldr	r3, [pc, #520]	@ (800271c <HAL_RCC_OscConfig+0x4c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d118      	bne.n	8002550 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251e:	4b7f      	ldr	r3, [pc, #508]	@ (800271c <HAL_RCC_OscConfig+0x4c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7e      	ldr	r2, [pc, #504]	@ (800271c <HAL_RCC_OscConfig+0x4c8>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7ff fbe5 	bl	8001cf8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7ff fbe1 	bl	8001cf8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	@ 0x64
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e103      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	4b75      	ldr	r3, [pc, #468]	@ (800271c <HAL_RCC_OscConfig+0x4c8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 8002558:	4b6f      	ldr	r3, [pc, #444]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a6e      	ldr	r2, [pc, #440]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e02d      	b.n	80025c2 <HAL_RCC_OscConfig+0x36e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x334>
 800256e:	4b6a      	ldr	r3, [pc, #424]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a69      	ldr	r2, [pc, #420]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	4b67      	ldr	r3, [pc, #412]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a66      	ldr	r2, [pc, #408]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	e01c      	b.n	80025c2 <HAL_RCC_OscConfig+0x36e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x356>
 8002590:	4b61      	ldr	r3, [pc, #388]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a60      	ldr	r2, [pc, #384]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	4b5e      	ldr	r3, [pc, #376]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	e00b      	b.n	80025c2 <HAL_RCC_OscConfig+0x36e>
 80025aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a57      	ldr	r2, [pc, #348]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d015      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fb95 	bl	8001cf8 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fb91 	bl	8001cf8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0b1      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ee      	beq.n	80025d2 <HAL_RCC_OscConfig+0x37e>
 80025f4:	e014      	b.n	8002620 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb7f 	bl	8001cf8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fb7b 	bl	8001cf8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e09b      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b3c      	ldr	r3, [pc, #240]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a3b      	ldr	r2, [pc, #236]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002630:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8087 	beq.w	800274a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263c:	4b36      	ldr	r3, [pc, #216]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d061      	beq.n	800270c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d146      	bne.n	80026de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <HAL_RCC_OscConfig+0x4cc>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7ff fb4f 	bl	8001cf8 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7ff fb4b 	bl	8001cf8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e06d      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d108      	bne.n	8002698 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002686:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4921      	ldr	r1, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002698:	4b1f      	ldr	r3, [pc, #124]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a19      	ldr	r1, [r3, #32]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	430b      	orrs	r3, r1
 80026aa:	491b      	ldr	r1, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb1f 	bl	8001cf8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7ff fb1b 	bl	8001cf8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e03d      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
 80026dc:	e035      	b.n	800274a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fb08 	bl	8001cf8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7ff fb04 	bl	8001cf8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e026      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x498>
 800270a:	e01e      	b.n	800274a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e019      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_OscConfig+0x500>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	429a      	cmp	r2, r3
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d0      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b6a      	ldr	r3, [pc, #424]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d910      	bls.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b67      	ldr	r3, [pc, #412]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4965      	ldr	r1, [pc, #404]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a58      	ldr	r2, [pc, #352]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a52      	ldr	r2, [pc, #328]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d040      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e073      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b39      	ldr	r3, [pc, #228]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4936      	ldr	r1, [pc, #216]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7ff fa56 	bl	8001cf8 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7ff fa52 	bl	8001cf8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e053      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d210      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4922      	ldr	r1, [pc, #136]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 f821 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	@ (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_RCC_ClockConfig+0x1cc>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f9b4 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	40021000 	.word	0x40021000
 8002920:	080050a0 	.word	0x080050a0
 8002924:	20000008 	.word	0x20000008
 8002928:	2000000c 	.word	0x2000000c

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x30>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d003      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x36>
 800295a:	e027      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	613b      	str	r3, [r7, #16]
      break;
 8002960:	e027      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	0c9b      	lsrs	r3, r3, #18
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0c5b      	lsrs	r3, r3, #17
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	fb03 f202 	mul.w	r2, r3, r2
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e004      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	613b      	str	r3, [r7, #16]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ae:	613b      	str	r3, [r7, #16]
      break;
 80029b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b2:	693b      	ldr	r3, [r7, #16]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	007a1200 	.word	0x007a1200
 80029c8:	080050b8 	.word	0x080050b8
 80029cc:	080050c8 	.word	0x080050c8
 80029d0:	003d0900 	.word	0x003d0900

080029d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d8:	4b02      	ldr	r3, [pc, #8]	@ (80029e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ec:	f7ff fff2 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	@ (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080050b0 	.word	0x080050b0

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	@ (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	080050b0 	.word	0x080050b0

08002a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a40:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <RCC_Delay+0x34>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <RCC_Delay+0x38>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0a5b      	lsrs	r3, r3, #9
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a54:	bf00      	nop
  }
  while (Delay --);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	60fa      	str	r2, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <RCC_Delay+0x1c>
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	10624dd3 	.word	0x10624dd3

08002a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e076      	b.n	8002b74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d108      	bne.n	8002aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a96:	d009      	beq.n	8002aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
 8002a9e:	e005      	b.n	8002aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe ff4a 	bl	8001960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	ea42 0103 	orr.w	r1, r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	0c1a      	lsrs	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f002 0204 	and.w	r2, r2, #4
 8002b52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b8c:	f7ff f8b4 	bl	8001cf8 <HAL_GetTick>
 8002b90:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e12a      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_SPI_Transmit+0x36>
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e122      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_SPI_Transmit+0x48>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e11b      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c12:	d10f      	bne.n	8002c34 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3e:	2b40      	cmp	r3, #64	@ 0x40
 8002c40:	d007      	beq.n	8002c52 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c5a:	d152      	bne.n	8002d02 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_Transmit+0xee>
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d145      	bne.n	8002cf6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	1c9a      	adds	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c8e:	e032      	b.n	8002cf6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d112      	bne.n	8002cc4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	1c9a      	adds	r2, r3, #2
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cc2:	e018      	b.n	8002cf6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc4:	f7ff f818 	bl	8001cf8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d803      	bhi.n	8002cdc <HAL_SPI_Transmit+0x160>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_Transmit+0x166>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e082      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1c7      	bne.n	8002c90 <HAL_SPI_Transmit+0x114>
 8002d00:	e053      	b.n	8002daa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_Transmit+0x194>
 8002d0a:	8b7b      	ldrh	r3, [r7, #26]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d147      	bne.n	8002da0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d36:	e033      	b.n	8002da0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d113      	bne.n	8002d6e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	7812      	ldrb	r2, [r2, #0]
 8002d52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d6c:	e018      	b.n	8002da0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6e:	f7fe ffc3 	bl	8001cf8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d803      	bhi.n	8002d86 <HAL_SPI_Transmit+0x20a>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x210>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e02d      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1c6      	bne.n	8002d38 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fbc4 	bl	800353c <SPI_EndRxTxTransaction>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
 8002e22:	e104      	b.n	800302e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e2c:	d112      	bne.n	8002e54 <HAL_SPI_Receive+0x50>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8f3 	bl	8003036 <HAL_SPI_TransmitReceive>
 8002e50:	4603      	mov	r3, r0
 8002e52:	e0ec      	b.n	800302e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e54:	f7fe ff50 	bl	8001cf8 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Receive+0x62>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0e1      	b.n	800302e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_SPI_Receive+0x74>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0da      	b.n	800302e <HAL_SPI_Receive+0x22a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2204      	movs	r2, #4
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b40      	cmp	r3, #64	@ 0x40
 8002ef4:	d007      	beq.n	8002f06 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d170      	bne.n	8002ff0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f0e:	e035      	b.n	8002f7c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d115      	bne.n	8002f4a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f103 020c 	add.w	r2, r3, #12
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f48:	e018      	b.n	8002f7c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4a:	f7fe fed5 	bl	8001cf8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d803      	bhi.n	8002f62 <HAL_SPI_Receive+0x15e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d102      	bne.n	8002f68 <HAL_SPI_Receive+0x164>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e058      	b.n	800302e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1c4      	bne.n	8002f10 <HAL_SPI_Receive+0x10c>
 8002f86:	e038      	b.n	8002ffa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d113      	bne.n	8002fbe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fbc:	e018      	b.n	8002ff0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fbe:	f7fe fe9b 	bl	8001cf8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d803      	bhi.n	8002fd6 <HAL_SPI_Receive+0x1d2>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d102      	bne.n	8002fdc <HAL_SPI_Receive+0x1d8>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e01e      	b.n	800302e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1c6      	bne.n	8002f88 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa4a 	bl	8003498 <SPI_EndRxTransaction>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800302c:	2300      	movs	r3, #0
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08a      	sub	sp, #40	@ 0x28
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003044:	2301      	movs	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003048:	f7fe fe56 	bl	8001cf8 <HAL_GetTick>
 800304c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003054:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003060:	7ffb      	ldrb	r3, [r7, #31]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d00c      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x4a>
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800306c:	d106      	bne.n	800307c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <HAL_SPI_TransmitReceive+0x46>
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d001      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
 800307e:	e17f      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x5c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x5c>
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e174      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x6e>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e16d      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d003      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d007      	beq.n	8003114 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311c:	d17e      	bne.n	800321c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_TransmitReceive+0xf6>
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d16c      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	881a      	ldrh	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	1c9a      	adds	r2, r3, #2
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	e059      	b.n	8003206 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11b      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x162>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x162>
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d113      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d119      	bne.n	80031da <HAL_SPI_TransmitReceive+0x1a4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d014      	beq.n	80031da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	b292      	uxth	r2, r2
 80031bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c2:	1c9a      	adds	r2, r3, #2
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031da:	f7fe fd8d 	bl	8001cf8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d80d      	bhi.n	8003206 <HAL_SPI_TransmitReceive+0x1d0>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d009      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0bc      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1a0      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x11c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d19b      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x11c>
 800321a:	e082      	b.n	8003322 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_TransmitReceive+0x1f4>
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d171      	bne.n	800330e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003250:	e05d      	b.n	800330e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11c      	bne.n	800329a <HAL_SPI_TransmitReceive+0x264>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d017      	beq.n	800329a <HAL_SPI_TransmitReceive+0x264>
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	2b01      	cmp	r3, #1
 800326e:	d114      	bne.n	800329a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	330c      	adds	r3, #12
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d119      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x2a6>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d014      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032dc:	f7fe fd0c 	bl	8001cf8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d803      	bhi.n	80032f4 <HAL_SPI_TransmitReceive+0x2be>
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x2c4>
 80032f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e038      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d19c      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x21c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d197      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f908 	bl	800353c <SPI_EndRxTxTransaction>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01d      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800337e:	2300      	movs	r3, #0
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	@ 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003398:	f7fe fcae 	bl	8001cf8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033a8:	f7fe fca6 	bl	8001cf8 <HAL_GetTick>
 80033ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ae:	4b39      	ldr	r3, [pc, #228]	@ (8003494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	015b      	lsls	r3, r3, #5
 80033b4:	0d1b      	lsrs	r3, r3, #20
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033be:	e054      	b.n	800346a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d050      	beq.n	800346a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c8:	f7fe fc96 	bl	8001cf8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d902      	bls.n	80033de <SPI_WaitFlagStateUntilTimeout+0x56>
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d13d      	bne.n	800345a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033f6:	d111      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0x94>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003400:	d004      	beq.n	800340c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340a:	d107      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d10f      	bne.n	8003446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e017      	b.n	800348a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3b01      	subs	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	429a      	cmp	r2, r3
 8003486:	d19b      	bne.n	80033c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000008 	.word	0x20000008

08003498 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ac:	d111      	bne.n	80034d2 <SPI_EndRxTransaction+0x3a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b6:	d004      	beq.n	80034c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c0:	d107      	bne.n	80034d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034da:	d117      	bne.n	800350c <SPI_EndRxTransaction+0x74>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e4:	d112      	bne.n	800350c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2101      	movs	r1, #1
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff ff49 	bl	8003388 <SPI_WaitFlagStateUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e013      	b.n	8003534 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff ff36 	bl	8003388 <SPI_WaitFlagStateUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e000      	b.n	8003534 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2201      	movs	r2, #1
 8003550:	2102      	movs	r1, #2
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ff18 	bl	8003388 <SPI_WaitFlagStateUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e013      	b.n	8003596 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff ff05 	bl	8003388 <SPI_WaitFlagStateUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e000      	b.n	8003596 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e041      	b.n	8003634 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe fa15 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f000 fab1 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e041      	b.n	80036d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f839 	bl	80036da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fa62 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_TIM_PWM_Start+0x24>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e022      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b04      	cmp	r3, #4
 8003714:	d109      	bne.n	800372a <HAL_TIM_PWM_Start+0x3e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e015      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d109      	bne.n	8003744 <HAL_TIM_PWM_Start+0x58>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e008      	b.n	8003756 <HAL_TIM_PWM_Start+0x6a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e05e      	b.n	800381c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0x82>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376c:	e013      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0x92>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800377c:	e00b      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d104      	bne.n	800378e <HAL_TIM_PWM_Start+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378c:	e003      	b.n	8003796 <HAL_TIM_PWM_Start+0xaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fc5c 	bl	800405c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <HAL_TIM_PWM_Start+0x138>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d107      	bne.n	80037be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_TIM_PWM_Start+0x138>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d009      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a14      	ldr	r2, [pc, #80]	@ (8003828 <HAL_TIM_PWM_Start+0x13c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIM_PWM_Start+0xfa>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a12      	ldr	r2, [pc, #72]	@ (800382c <HAL_TIM_PWM_Start+0x140>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d111      	bne.n	800380a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d010      	beq.n	800381a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	e007      	b.n	800381a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800

08003830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ae      	b.n	80039ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f200 809f 	bhi.w	800399c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800385e:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003899 	.word	0x08003899
 8003868:	0800399d 	.word	0x0800399d
 800386c:	0800399d 	.word	0x0800399d
 8003870:	0800399d 	.word	0x0800399d
 8003874:	080038d9 	.word	0x080038d9
 8003878:	0800399d 	.word	0x0800399d
 800387c:	0800399d 	.word	0x0800399d
 8003880:	0800399d 	.word	0x0800399d
 8003884:	0800391b 	.word	0x0800391b
 8003888:	0800399d 	.word	0x0800399d
 800388c:	0800399d 	.word	0x0800399d
 8003890:	0800399d 	.word	0x0800399d
 8003894:	0800395b 	.word	0x0800395b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f9be 	bl	8003c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]
      break;
 80038d6:	e064      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fa04 	bl	8003cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	619a      	str	r2, [r3, #24]
      break;
 8003918:	e043      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fa4d 	bl	8003dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0208 	orr.w	r2, r2, #8
 8003934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0204 	bic.w	r2, r2, #4
 8003944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
      break;
 8003958:	e023      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fa97 	bl	8003e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	61da      	str	r2, [r3, #28]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_ConfigClockSource+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b4      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x186>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a08:	d03e      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0xd4>
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0e:	f200 8087 	bhi.w	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a16:	f000 8086 	beq.w	8003b26 <HAL_TIM_ConfigClockSource+0x172>
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1e:	d87f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d01a      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0xa6>
 8003a24:	2b70      	cmp	r3, #112	@ 0x70
 8003a26:	d87b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d050      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x11a>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d877      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d03c      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0xfa>
 8003a34:	2b50      	cmp	r3, #80	@ 0x50
 8003a36:	d873      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d058      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x13a>
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d86f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d064      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b30      	cmp	r3, #48	@ 0x30
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d867      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d05c      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d05a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	e062      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	f000 fad8 	bl	800401e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	609a      	str	r2, [r3, #8]
      break;
 8003a86:	e04f      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	f000 fac1 	bl	800401e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 fa38 	bl	8003f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	@ 0x50
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa8f 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 fa56 	bl	8003f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	@ 0x60
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa7f 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	461a      	mov	r2, r3
 8003afc:	f000 fa18 	bl	8003f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa6f 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 fa66 	bl	8003fea <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	@ (8003c14 <TIM_Base_SetConfig+0xd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b62:	d007      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <TIM_Base_SetConfig+0xd4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c1c <TIM_Base_SetConfig+0xd8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a22      	ldr	r2, [pc, #136]	@ (8003c14 <TIM_Base_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <TIM_Base_SetConfig+0xd4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c1c <TIM_Base_SetConfig+0xd8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <TIM_Base_SetConfig+0xd0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f023 0201 	bic.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <TIM_OC1_SetConfig+0xc8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0308 	bic.w	r3, r3, #8
 8003c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a13      	ldr	r2, [pc, #76]	@ (8003ce8 <TIM_OC1_SetConfig+0xc8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00

08003cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 0210 	bic.w	r2, r3, #16
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0320 	bic.w	r3, r3, #32
 8003d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <TIM_OC2_SetConfig+0xd0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10d      	bne.n	8003d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <TIM_OC2_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d113      	bne.n	8003d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00

08003dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	@ (8003e90 <TIM_OC3_SetConfig+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10d      	bne.n	8003e3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	@ (8003e90 <TIM_OC3_SetConfig+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40012c00 	.word	0x40012c00

08003e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	031b      	lsls	r3, r3, #12
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0f      	ldr	r2, [pc, #60]	@ (8003f2c <TIM_OC4_SetConfig+0x98>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00

08003f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f023 0201 	bic.w	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 030a 	bic.w	r3, r3, #10
 8003f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0210 	bic.w	r2, r3, #16
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr

08003fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	f043 0307 	orr.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004038:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	431a      	orrs	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2201      	movs	r2, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1a      	ldr	r2, [r3, #32]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	43db      	mvns	r3, r3
 800407e:	401a      	ands	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1a      	ldr	r2, [r3, #32]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e046      	b.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00e      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d009      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a12      	ldr	r2, [pc, #72]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a10      	ldr	r2, [pc, #64]	@ (800415c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10c      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4313      	orrs	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800

08004160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004178:	2302      	movs	r3, #2
 800417a:	e03d      	b.n	80041f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e042      	b.n	800429a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fd fc35 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2224      	movs	r2, #36	@ 0x24
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004244:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f972 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800425a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800426a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800427a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08a      	sub	sp, #40	@ 0x28
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d175      	bne.n	80043ae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_Transmit+0x2c>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e06e      	b.n	80043b0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2221      	movs	r2, #33	@ 0x21
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e0:	f7fd fd0a 	bl	8001cf8 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d108      	bne.n	800430e <HAL_UART_Transmit+0x6c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e003      	b.n	8004316 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004316:	e02e      	b.n	8004376 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	@ 0x80
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f848 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e03a      	b.n	80043b0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3302      	adds	r3, #2
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e007      	b.n	8004368 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1cb      	bne.n	8004318 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	2140      	movs	r1, #64	@ 0x40
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f814 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e006      	b.n	80043b0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e000      	b.n	80043b0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c8:	e03b      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d037      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fd fc91 	bl	8001cf8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e03a      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d023      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b80      	cmp	r3, #128	@ 0x80
 80043fe:	d020      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d01d      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d116      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f81d 	bl	800446a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2208      	movs	r2, #8
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e00f      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d0b4      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b095      	sub	sp, #84	@ 0x54
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004492:	643a      	str	r2, [r7, #64]	@ 0x40
 8004494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d119      	bne.n	8004516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0310 	bic.w	r3, r3, #16
 80044f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004502:	61ba      	str	r2, [r7, #24]
 8004504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004524:	bf00      	nop
 8004526:	3754      	adds	r7, #84	@ 0x54
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
	...

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800456a:	f023 030c 	bic.w	r3, r3, #12
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	430b      	orrs	r3, r1
 8004576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2c      	ldr	r2, [pc, #176]	@ (8004644 <UART_SetConfig+0x114>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7fe fa3a 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	e002      	b.n	80045a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7fe fa22 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80045a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	4a22      	ldr	r2, [pc, #136]	@ (8004648 <UART_SetConfig+0x118>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	0119      	lsls	r1, r3, #4
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <UART_SetConfig+0x118>)
 80045de:	fba3 0302 	umull	r0, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2064      	movs	r0, #100	@ 0x64
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	@ 0x32
 80045f0:	4a15      	ldr	r2, [pc, #84]	@ (8004648 <UART_SetConfig+0x118>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045fc:	4419      	add	r1, r3
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	fbb2 f2f3 	udiv	r2, r2, r3
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <UART_SetConfig+0x118>)
 8004616:	fba3 0302 	umull	r0, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2064      	movs	r0, #100	@ 0x64
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	@ 0x32
 8004628:	4a07      	ldr	r2, [pc, #28]	@ (8004648 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 020f 	and.w	r2, r3, #15
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	440a      	add	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40013800 	.word	0x40013800
 8004648:	51eb851f 	.word	0x51eb851f

0800464c <sniprintf>:
 800464c:	b40c      	push	{r2, r3}
 800464e:	b530      	push	{r4, r5, lr}
 8004650:	4b18      	ldr	r3, [pc, #96]	@ (80046b4 <sniprintf+0x68>)
 8004652:	1e0c      	subs	r4, r1, #0
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	b09d      	sub	sp, #116	@ 0x74
 8004658:	da08      	bge.n	800466c <sniprintf+0x20>
 800465a:	238b      	movs	r3, #139	@ 0x8b
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	b01d      	add	sp, #116	@ 0x74
 8004664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004668:	b002      	add	sp, #8
 800466a:	4770      	bx	lr
 800466c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004670:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	931b      	str	r3, [sp, #108]	@ 0x6c
 800467a:	bf0c      	ite	eq
 800467c:	4623      	moveq	r3, r4
 800467e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004682:	9304      	str	r3, [sp, #16]
 8004684:	9307      	str	r3, [sp, #28]
 8004686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800468a:	9002      	str	r0, [sp, #8]
 800468c:	9006      	str	r0, [sp, #24]
 800468e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004692:	4628      	mov	r0, r5
 8004694:	ab21      	add	r3, sp, #132	@ 0x84
 8004696:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004698:	a902      	add	r1, sp, #8
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	f000 f992 	bl	80049c4 <_svfiprintf_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	bfbc      	itt	lt
 80046a4:	238b      	movlt	r3, #139	@ 0x8b
 80046a6:	602b      	strlt	r3, [r5, #0]
 80046a8:	2c00      	cmp	r4, #0
 80046aa:	d0da      	beq.n	8004662 <sniprintf+0x16>
 80046ac:	2200      	movs	r2, #0
 80046ae:	9b02      	ldr	r3, [sp, #8]
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e7d6      	b.n	8004662 <sniprintf+0x16>
 80046b4:	20000014 	.word	0x20000014

080046b8 <memset>:
 80046b8:	4603      	mov	r3, r0
 80046ba:	4402      	add	r2, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	@ (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000014 	.word	0x20000014

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	2600      	movs	r6, #0
 80046d8:	4d0c      	ldr	r5, [pc, #48]	@ (800470c <__libc_init_array+0x38>)
 80046da:	4c0d      	ldr	r4, [pc, #52]	@ (8004710 <__libc_init_array+0x3c>)
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	f000 fca6 	bl	8005034 <_init>
 80046e8:	2600      	movs	r6, #0
 80046ea:	4d0a      	ldr	r5, [pc, #40]	@ (8004714 <__libc_init_array+0x40>)
 80046ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004718 <__libc_init_array+0x44>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08005100 	.word	0x08005100
 8004710:	08005100 	.word	0x08005100
 8004714:	08005100 	.word	0x08005100
 8004718:	08005104 	.word	0x08005104

0800471c <__retarget_lock_acquire_recursive>:
 800471c:	4770      	bx	lr

0800471e <__retarget_lock_release_recursive>:
 800471e:	4770      	bx	lr

08004720 <_free_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
 8004724:	2900      	cmp	r1, #0
 8004726:	d040      	beq.n	80047aa <_free_r+0x8a>
 8004728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472c:	1f0c      	subs	r4, r1, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfb8      	it	lt
 8004732:	18e4      	addlt	r4, r4, r3
 8004734:	f000 f8de 	bl	80048f4 <__malloc_lock>
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <_free_r+0x8c>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	b933      	cbnz	r3, 800474c <_free_r+0x2c>
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	6014      	str	r4, [r2, #0]
 8004742:	4628      	mov	r0, r5
 8004744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004748:	f000 b8da 	b.w	8004900 <__malloc_unlock>
 800474c:	42a3      	cmp	r3, r4
 800474e:	d908      	bls.n	8004762 <_free_r+0x42>
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	1821      	adds	r1, r4, r0
 8004754:	428b      	cmp	r3, r1
 8004756:	bf01      	itttt	eq
 8004758:	6819      	ldreq	r1, [r3, #0]
 800475a:	685b      	ldreq	r3, [r3, #4]
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	e7ed      	b.n	800473e <_free_r+0x1e>
 8004762:	461a      	mov	r2, r3
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b10b      	cbz	r3, 800476c <_free_r+0x4c>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d9fa      	bls.n	8004762 <_free_r+0x42>
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	1850      	adds	r0, r2, r1
 8004770:	42a0      	cmp	r0, r4
 8004772:	d10b      	bne.n	800478c <_free_r+0x6c>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4401      	add	r1, r0
 8004778:	1850      	adds	r0, r2, r1
 800477a:	4283      	cmp	r3, r0
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	d1e0      	bne.n	8004742 <_free_r+0x22>
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4408      	add	r0, r1
 8004786:	6010      	str	r0, [r2, #0]
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	e7da      	b.n	8004742 <_free_r+0x22>
 800478c:	d902      	bls.n	8004794 <_free_r+0x74>
 800478e:	230c      	movs	r3, #12
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	e7d6      	b.n	8004742 <_free_r+0x22>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	1821      	adds	r1, r4, r0
 8004798:	428b      	cmp	r3, r1
 800479a:	bf01      	itttt	eq
 800479c:	6819      	ldreq	r1, [r3, #0]
 800479e:	685b      	ldreq	r3, [r3, #4]
 80047a0:	1809      	addeq	r1, r1, r0
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6054      	str	r4, [r2, #4]
 80047a8:	e7cb      	b.n	8004742 <_free_r+0x22>
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	200002b8 	.word	0x200002b8

080047b0 <sbrk_aligned>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e0f      	ldr	r6, [pc, #60]	@ (80047f0 <sbrk_aligned+0x40>)
 80047b4:	460c      	mov	r4, r1
 80047b6:	6831      	ldr	r1, [r6, #0]
 80047b8:	4605      	mov	r5, r0
 80047ba:	b911      	cbnz	r1, 80047c2 <sbrk_aligned+0x12>
 80047bc:	f000 fba8 	bl	8004f10 <_sbrk_r>
 80047c0:	6030      	str	r0, [r6, #0]
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 fba3 	bl	8004f10 <_sbrk_r>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d103      	bne.n	80047d6 <sbrk_aligned+0x26>
 80047ce:	f04f 34ff 	mov.w	r4, #4294967295
 80047d2:	4620      	mov	r0, r4
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	1cc4      	adds	r4, r0, #3
 80047d8:	f024 0403 	bic.w	r4, r4, #3
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d0f8      	beq.n	80047d2 <sbrk_aligned+0x22>
 80047e0:	1a21      	subs	r1, r4, r0
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 fb94 	bl	8004f10 <_sbrk_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1f2      	bne.n	80047d2 <sbrk_aligned+0x22>
 80047ec:	e7ef      	b.n	80047ce <sbrk_aligned+0x1e>
 80047ee:	bf00      	nop
 80047f0:	200002b4 	.word	0x200002b4

080047f4 <_malloc_r>:
 80047f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047f8:	1ccd      	adds	r5, r1, #3
 80047fa:	f025 0503 	bic.w	r5, r5, #3
 80047fe:	3508      	adds	r5, #8
 8004800:	2d0c      	cmp	r5, #12
 8004802:	bf38      	it	cc
 8004804:	250c      	movcc	r5, #12
 8004806:	2d00      	cmp	r5, #0
 8004808:	4606      	mov	r6, r0
 800480a:	db01      	blt.n	8004810 <_malloc_r+0x1c>
 800480c:	42a9      	cmp	r1, r5
 800480e:	d904      	bls.n	800481a <_malloc_r+0x26>
 8004810:	230c      	movs	r3, #12
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	2000      	movs	r0, #0
 8004816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048f0 <_malloc_r+0xfc>
 800481e:	f000 f869 	bl	80048f4 <__malloc_lock>
 8004822:	f8d8 3000 	ldr.w	r3, [r8]
 8004826:	461c      	mov	r4, r3
 8004828:	bb44      	cbnz	r4, 800487c <_malloc_r+0x88>
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffbf 	bl	80047b0 <sbrk_aligned>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	4604      	mov	r4, r0
 8004836:	d158      	bne.n	80048ea <_malloc_r+0xf6>
 8004838:	f8d8 4000 	ldr.w	r4, [r8]
 800483c:	4627      	mov	r7, r4
 800483e:	2f00      	cmp	r7, #0
 8004840:	d143      	bne.n	80048ca <_malloc_r+0xd6>
 8004842:	2c00      	cmp	r4, #0
 8004844:	d04b      	beq.n	80048de <_malloc_r+0xea>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4639      	mov	r1, r7
 800484a:	4630      	mov	r0, r6
 800484c:	eb04 0903 	add.w	r9, r4, r3
 8004850:	f000 fb5e 	bl	8004f10 <_sbrk_r>
 8004854:	4581      	cmp	r9, r0
 8004856:	d142      	bne.n	80048de <_malloc_r+0xea>
 8004858:	6821      	ldr	r1, [r4, #0]
 800485a:	4630      	mov	r0, r6
 800485c:	1a6d      	subs	r5, r5, r1
 800485e:	4629      	mov	r1, r5
 8004860:	f7ff ffa6 	bl	80047b0 <sbrk_aligned>
 8004864:	3001      	adds	r0, #1
 8004866:	d03a      	beq.n	80048de <_malloc_r+0xea>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	442b      	add	r3, r5
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	f8d8 3000 	ldr.w	r3, [r8]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	bb62      	cbnz	r2, 80048d0 <_malloc_r+0xdc>
 8004876:	f8c8 7000 	str.w	r7, [r8]
 800487a:	e00f      	b.n	800489c <_malloc_r+0xa8>
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	1b52      	subs	r2, r2, r5
 8004880:	d420      	bmi.n	80048c4 <_malloc_r+0xd0>
 8004882:	2a0b      	cmp	r2, #11
 8004884:	d917      	bls.n	80048b6 <_malloc_r+0xc2>
 8004886:	1961      	adds	r1, r4, r5
 8004888:	42a3      	cmp	r3, r4
 800488a:	6025      	str	r5, [r4, #0]
 800488c:	bf18      	it	ne
 800488e:	6059      	strne	r1, [r3, #4]
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	bf08      	it	eq
 8004894:	f8c8 1000 	streq.w	r1, [r8]
 8004898:	5162      	str	r2, [r4, r5]
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f82f 	bl	8004900 <__malloc_unlock>
 80048a2:	f104 000b 	add.w	r0, r4, #11
 80048a6:	1d23      	adds	r3, r4, #4
 80048a8:	f020 0007 	bic.w	r0, r0, #7
 80048ac:	1ac2      	subs	r2, r0, r3
 80048ae:	bf1c      	itt	ne
 80048b0:	1a1b      	subne	r3, r3, r0
 80048b2:	50a3      	strne	r3, [r4, r2]
 80048b4:	e7af      	b.n	8004816 <_malloc_r+0x22>
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	bf0c      	ite	eq
 80048bc:	f8c8 2000 	streq.w	r2, [r8]
 80048c0:	605a      	strne	r2, [r3, #4]
 80048c2:	e7eb      	b.n	800489c <_malloc_r+0xa8>
 80048c4:	4623      	mov	r3, r4
 80048c6:	6864      	ldr	r4, [r4, #4]
 80048c8:	e7ae      	b.n	8004828 <_malloc_r+0x34>
 80048ca:	463c      	mov	r4, r7
 80048cc:	687f      	ldr	r7, [r7, #4]
 80048ce:	e7b6      	b.n	800483e <_malloc_r+0x4a>
 80048d0:	461a      	mov	r2, r3
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d1fb      	bne.n	80048d0 <_malloc_r+0xdc>
 80048d8:	2300      	movs	r3, #0
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e7de      	b.n	800489c <_malloc_r+0xa8>
 80048de:	230c      	movs	r3, #12
 80048e0:	4630      	mov	r0, r6
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	f000 f80c 	bl	8004900 <__malloc_unlock>
 80048e8:	e794      	b.n	8004814 <_malloc_r+0x20>
 80048ea:	6005      	str	r5, [r0, #0]
 80048ec:	e7d6      	b.n	800489c <_malloc_r+0xa8>
 80048ee:	bf00      	nop
 80048f0:	200002b8 	.word	0x200002b8

080048f4 <__malloc_lock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__malloc_lock+0x8>)
 80048f6:	f7ff bf11 	b.w	800471c <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	200002b0 	.word	0x200002b0

08004900 <__malloc_unlock>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__malloc_unlock+0x8>)
 8004902:	f7ff bf0c 	b.w	800471e <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	200002b0 	.word	0x200002b0

0800490c <__ssputs_r>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	461f      	mov	r7, r3
 8004912:	688e      	ldr	r6, [r1, #8]
 8004914:	4682      	mov	sl, r0
 8004916:	42be      	cmp	r6, r7
 8004918:	460c      	mov	r4, r1
 800491a:	4690      	mov	r8, r2
 800491c:	680b      	ldr	r3, [r1, #0]
 800491e:	d82d      	bhi.n	800497c <__ssputs_r+0x70>
 8004920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004924:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004928:	d026      	beq.n	8004978 <__ssputs_r+0x6c>
 800492a:	6965      	ldr	r5, [r4, #20]
 800492c:	6909      	ldr	r1, [r1, #16]
 800492e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004932:	eba3 0901 	sub.w	r9, r3, r1
 8004936:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800493a:	1c7b      	adds	r3, r7, #1
 800493c:	444b      	add	r3, r9
 800493e:	106d      	asrs	r5, r5, #1
 8004940:	429d      	cmp	r5, r3
 8004942:	bf38      	it	cc
 8004944:	461d      	movcc	r5, r3
 8004946:	0553      	lsls	r3, r2, #21
 8004948:	d527      	bpl.n	800499a <__ssputs_r+0x8e>
 800494a:	4629      	mov	r1, r5
 800494c:	f7ff ff52 	bl	80047f4 <_malloc_r>
 8004950:	4606      	mov	r6, r0
 8004952:	b360      	cbz	r0, 80049ae <__ssputs_r+0xa2>
 8004954:	464a      	mov	r2, r9
 8004956:	6921      	ldr	r1, [r4, #16]
 8004958:	f000 faf8 	bl	8004f4c <memcpy>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	6126      	str	r6, [r4, #16]
 800496a:	444e      	add	r6, r9
 800496c:	6026      	str	r6, [r4, #0]
 800496e:	463e      	mov	r6, r7
 8004970:	6165      	str	r5, [r4, #20]
 8004972:	eba5 0509 	sub.w	r5, r5, r9
 8004976:	60a5      	str	r5, [r4, #8]
 8004978:	42be      	cmp	r6, r7
 800497a:	d900      	bls.n	800497e <__ssputs_r+0x72>
 800497c:	463e      	mov	r6, r7
 800497e:	4632      	mov	r2, r6
 8004980:	4641      	mov	r1, r8
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	f000 faaa 	bl	8004edc <memmove>
 8004988:	2000      	movs	r0, #0
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	1b9b      	subs	r3, r3, r6
 800498e:	60a3      	str	r3, [r4, #8]
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	4433      	add	r3, r6
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	462a      	mov	r2, r5
 800499c:	f000 fae4 	bl	8004f68 <_realloc_r>
 80049a0:	4606      	mov	r6, r0
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d1e0      	bne.n	8004968 <__ssputs_r+0x5c>
 80049a6:	4650      	mov	r0, sl
 80049a8:	6921      	ldr	r1, [r4, #16]
 80049aa:	f7ff feb9 	bl	8004720 <_free_r>
 80049ae:	230c      	movs	r3, #12
 80049b0:	f8ca 3000 	str.w	r3, [sl]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	e7e9      	b.n	8004996 <__ssputs_r+0x8a>
	...

080049c4 <_svfiprintf_r>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4698      	mov	r8, r3
 80049ca:	898b      	ldrh	r3, [r1, #12]
 80049cc:	4607      	mov	r7, r0
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	460d      	mov	r5, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	b09d      	sub	sp, #116	@ 0x74
 80049d6:	d510      	bpl.n	80049fa <_svfiprintf_r+0x36>
 80049d8:	690b      	ldr	r3, [r1, #16]
 80049da:	b973      	cbnz	r3, 80049fa <_svfiprintf_r+0x36>
 80049dc:	2140      	movs	r1, #64	@ 0x40
 80049de:	f7ff ff09 	bl	80047f4 <_malloc_r>
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	6128      	str	r0, [r5, #16]
 80049e6:	b930      	cbnz	r0, 80049f6 <_svfiprintf_r+0x32>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b01d      	add	sp, #116	@ 0x74
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	2340      	movs	r3, #64	@ 0x40
 80049f8:	616b      	str	r3, [r5, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fe:	2320      	movs	r3, #32
 8004a00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a04:	2330      	movs	r3, #48	@ 0x30
 8004a06:	f04f 0901 	mov.w	r9, #1
 8004a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a0e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ba8 <_svfiprintf_r+0x1e4>
 8004a12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a16:	4623      	mov	r3, r4
 8004a18:	469a      	mov	sl, r3
 8004a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1e:	b10a      	cbz	r2, 8004a24 <_svfiprintf_r+0x60>
 8004a20:	2a25      	cmp	r2, #37	@ 0x25
 8004a22:	d1f9      	bne.n	8004a18 <_svfiprintf_r+0x54>
 8004a24:	ebba 0b04 	subs.w	fp, sl, r4
 8004a28:	d00b      	beq.n	8004a42 <_svfiprintf_r+0x7e>
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4638      	mov	r0, r7
 8004a32:	f7ff ff6b 	bl	800490c <__ssputs_r>
 8004a36:	3001      	adds	r0, #1
 8004a38:	f000 80a7 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a3e:	445a      	add	r2, fp
 8004a40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 809f 	beq.w	8004b8a <_svfiprintf_r+0x1c6>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a56:	f10a 0a01 	add.w	sl, sl, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	9307      	str	r3, [sp, #28]
 8004a5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a64:	4654      	mov	r4, sl
 8004a66:	2205      	movs	r2, #5
 8004a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6c:	484e      	ldr	r0, [pc, #312]	@ (8004ba8 <_svfiprintf_r+0x1e4>)
 8004a6e:	f000 fa5f 	bl	8004f30 <memchr>
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	b9d8      	cbnz	r0, 8004aae <_svfiprintf_r+0xea>
 8004a76:	06d0      	lsls	r0, r2, #27
 8004a78:	bf44      	itt	mi
 8004a7a:	2320      	movmi	r3, #32
 8004a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a80:	0711      	lsls	r1, r2, #28
 8004a82:	bf44      	itt	mi
 8004a84:	232b      	movmi	r3, #43	@ 0x2b
 8004a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a90:	d015      	beq.n	8004abe <_svfiprintf_r+0xfa>
 8004a92:	4654      	mov	r4, sl
 8004a94:	2000      	movs	r0, #0
 8004a96:	f04f 0c0a 	mov.w	ip, #10
 8004a9a:	9a07      	ldr	r2, [sp, #28]
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aa2:	3b30      	subs	r3, #48	@ 0x30
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d94b      	bls.n	8004b40 <_svfiprintf_r+0x17c>
 8004aa8:	b1b0      	cbz	r0, 8004ad8 <_svfiprintf_r+0x114>
 8004aaa:	9207      	str	r2, [sp, #28]
 8004aac:	e014      	b.n	8004ad8 <_svfiprintf_r+0x114>
 8004aae:	eba0 0308 	sub.w	r3, r0, r8
 8004ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	46a2      	mov	sl, r4
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	e7d2      	b.n	8004a64 <_svfiprintf_r+0xa0>
 8004abe:	9b03      	ldr	r3, [sp, #12]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9103      	str	r1, [sp, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfbb      	ittet	lt
 8004aca:	425b      	neglt	r3, r3
 8004acc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ad0:	9307      	strge	r3, [sp, #28]
 8004ad2:	9307      	strlt	r3, [sp, #28]
 8004ad4:	bfb8      	it	lt
 8004ad6:	9204      	strlt	r2, [sp, #16]
 8004ad8:	7823      	ldrb	r3, [r4, #0]
 8004ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8004adc:	d10a      	bne.n	8004af4 <_svfiprintf_r+0x130>
 8004ade:	7863      	ldrb	r3, [r4, #1]
 8004ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae2:	d132      	bne.n	8004b4a <_svfiprintf_r+0x186>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	3402      	adds	r4, #2
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	9203      	str	r2, [sp, #12]
 8004aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004bac <_svfiprintf_r+0x1e8>
 8004af8:	2203      	movs	r2, #3
 8004afa:	4650      	mov	r0, sl
 8004afc:	7821      	ldrb	r1, [r4, #0]
 8004afe:	f000 fa17 	bl	8004f30 <memchr>
 8004b02:	b138      	cbz	r0, 8004b14 <_svfiprintf_r+0x150>
 8004b04:	2240      	movs	r2, #64	@ 0x40
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	eba0 000a 	sub.w	r0, r0, sl
 8004b0c:	4082      	lsls	r2, r0
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	3401      	adds	r4, #1
 8004b12:	9304      	str	r3, [sp, #16]
 8004b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b18:	2206      	movs	r2, #6
 8004b1a:	4825      	ldr	r0, [pc, #148]	@ (8004bb0 <_svfiprintf_r+0x1ec>)
 8004b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b20:	f000 fa06 	bl	8004f30 <memchr>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d036      	beq.n	8004b96 <_svfiprintf_r+0x1d2>
 8004b28:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b2a:	bb1b      	cbnz	r3, 8004b74 <_svfiprintf_r+0x1b0>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3a:	4433      	add	r3, r6
 8004b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3e:	e76a      	b.n	8004a16 <_svfiprintf_r+0x52>
 8004b40:	460c      	mov	r4, r1
 8004b42:	2001      	movs	r0, #1
 8004b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b48:	e7a8      	b.n	8004a9c <_svfiprintf_r+0xd8>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f04f 0c0a 	mov.w	ip, #10
 8004b50:	4619      	mov	r1, r3
 8004b52:	3401      	adds	r4, #1
 8004b54:	9305      	str	r3, [sp, #20]
 8004b56:	4620      	mov	r0, r4
 8004b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5c:	3a30      	subs	r2, #48	@ 0x30
 8004b5e:	2a09      	cmp	r2, #9
 8004b60:	d903      	bls.n	8004b6a <_svfiprintf_r+0x1a6>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0c6      	beq.n	8004af4 <_svfiprintf_r+0x130>
 8004b66:	9105      	str	r1, [sp, #20]
 8004b68:	e7c4      	b.n	8004af4 <_svfiprintf_r+0x130>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b72:	e7f0      	b.n	8004b56 <_svfiprintf_r+0x192>
 8004b74:	ab03      	add	r3, sp, #12
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb8 <_svfiprintf_r+0x1f4>)
 8004b7e:	a904      	add	r1, sp, #16
 8004b80:	f3af 8000 	nop.w
 8004b84:	1c42      	adds	r2, r0, #1
 8004b86:	4606      	mov	r6, r0
 8004b88:	d1d6      	bne.n	8004b38 <_svfiprintf_r+0x174>
 8004b8a:	89ab      	ldrh	r3, [r5, #12]
 8004b8c:	065b      	lsls	r3, r3, #25
 8004b8e:	f53f af2d 	bmi.w	80049ec <_svfiprintf_r+0x28>
 8004b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b94:	e72c      	b.n	80049f0 <_svfiprintf_r+0x2c>
 8004b96:	ab03      	add	r3, sp, #12
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	462a      	mov	r2, r5
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <_svfiprintf_r+0x1f4>)
 8004ba0:	a904      	add	r1, sp, #16
 8004ba2:	f000 f87d 	bl	8004ca0 <_printf_i>
 8004ba6:	e7ed      	b.n	8004b84 <_svfiprintf_r+0x1c0>
 8004ba8:	080050ca 	.word	0x080050ca
 8004bac:	080050d0 	.word	0x080050d0
 8004bb0:	080050d4 	.word	0x080050d4
 8004bb4:	00000000 	.word	0x00000000
 8004bb8:	0800490d 	.word	0x0800490d

08004bbc <_printf_common>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	4698      	mov	r8, r3
 8004bc4:	688a      	ldr	r2, [r1, #8]
 8004bc6:	690b      	ldr	r3, [r1, #16]
 8004bc8:	4607      	mov	r7, r0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	bfb8      	it	lt
 8004bce:	4613      	movlt	r3, r2
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bdc:	b10a      	cbz	r2, 8004be2 <_printf_common+0x26>
 8004bde:	3301      	adds	r3, #1
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	0699      	lsls	r1, r3, #26
 8004be6:	bf42      	ittt	mi
 8004be8:	6833      	ldrmi	r3, [r6, #0]
 8004bea:	3302      	addmi	r3, #2
 8004bec:	6033      	strmi	r3, [r6, #0]
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	f015 0506 	ands.w	r5, r5, #6
 8004bf4:	d106      	bne.n	8004c04 <_printf_common+0x48>
 8004bf6:	f104 0a19 	add.w	sl, r4, #25
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	6832      	ldr	r2, [r6, #0]
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	dc2b      	bgt.n	8004c5c <_printf_common+0xa0>
 8004c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	3b00      	subs	r3, #0
 8004c0c:	bf18      	it	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	0692      	lsls	r2, r2, #26
 8004c12:	d430      	bmi.n	8004c76 <_printf_common+0xba>
 8004c14:	4641      	mov	r1, r8
 8004c16:	4638      	mov	r0, r7
 8004c18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c1c:	47c8      	blx	r9
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d023      	beq.n	8004c6a <_printf_common+0xae>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	f003 0306 	and.w	r3, r3, #6
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf14      	ite	ne
 8004c2e:	2500      	movne	r5, #0
 8004c30:	6833      	ldreq	r3, [r6, #0]
 8004c32:	f04f 0600 	mov.w	r6, #0
 8004c36:	bf08      	it	eq
 8004c38:	68e5      	ldreq	r5, [r4, #12]
 8004c3a:	f104 041a 	add.w	r4, r4, #26
 8004c3e:	bf08      	it	eq
 8004c40:	1aed      	subeq	r5, r5, r3
 8004c42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c46:	bf08      	it	eq
 8004c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bfc4      	itt	gt
 8004c50:	1a9b      	subgt	r3, r3, r2
 8004c52:	18ed      	addgt	r5, r5, r3
 8004c54:	42b5      	cmp	r5, r6
 8004c56:	d11a      	bne.n	8004c8e <_printf_common+0xd2>
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e008      	b.n	8004c6e <_printf_common+0xb2>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	4652      	mov	r2, sl
 8004c60:	4641      	mov	r1, r8
 8004c62:	4638      	mov	r0, r7
 8004c64:	47c8      	blx	r9
 8004c66:	3001      	adds	r0, #1
 8004c68:	d103      	bne.n	8004c72 <_printf_common+0xb6>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	3501      	adds	r5, #1
 8004c74:	e7c1      	b.n	8004bfa <_printf_common+0x3e>
 8004c76:	2030      	movs	r0, #48	@ 0x30
 8004c78:	18e1      	adds	r1, r4, r3
 8004c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c84:	4422      	add	r2, r4
 8004c86:	3302      	adds	r3, #2
 8004c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c8c:	e7c2      	b.n	8004c14 <_printf_common+0x58>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4622      	mov	r2, r4
 8004c92:	4641      	mov	r1, r8
 8004c94:	4638      	mov	r0, r7
 8004c96:	47c8      	blx	r9
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d0e6      	beq.n	8004c6a <_printf_common+0xae>
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	e7d9      	b.n	8004c54 <_printf_common+0x98>

08004ca0 <_printf_i>:
 8004ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	7e0f      	ldrb	r7, [r1, #24]
 8004ca6:	4691      	mov	r9, r2
 8004ca8:	2f78      	cmp	r7, #120	@ 0x78
 8004caa:	4680      	mov	r8, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	469a      	mov	sl, r3
 8004cb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cb6:	d807      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cb8:	2f62      	cmp	r7, #98	@ 0x62
 8004cba:	d80a      	bhi.n	8004cd2 <_printf_i+0x32>
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	f000 80d1 	beq.w	8004e64 <_printf_i+0x1c4>
 8004cc2:	2f58      	cmp	r7, #88	@ 0x58
 8004cc4:	f000 80b8 	beq.w	8004e38 <_printf_i+0x198>
 8004cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cd0:	e03a      	b.n	8004d48 <_printf_i+0xa8>
 8004cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cd6:	2b15      	cmp	r3, #21
 8004cd8:	d8f6      	bhi.n	8004cc8 <_printf_i+0x28>
 8004cda:	a101      	add	r1, pc, #4	@ (adr r1, 8004ce0 <_printf_i+0x40>)
 8004cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ce0:	08004d39 	.word	0x08004d39
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004cc9 	.word	0x08004cc9
 8004cec:	08004cc9 	.word	0x08004cc9
 8004cf0:	08004cc9 	.word	0x08004cc9
 8004cf4:	08004cc9 	.word	0x08004cc9
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004cc9 	.word	0x08004cc9
 8004d00:	08004cc9 	.word	0x08004cc9
 8004d04:	08004cc9 	.word	0x08004cc9
 8004d08:	08004cc9 	.word	0x08004cc9
 8004d0c:	08004e4b 	.word	0x08004e4b
 8004d10:	08004d77 	.word	0x08004d77
 8004d14:	08004e05 	.word	0x08004e05
 8004d18:	08004cc9 	.word	0x08004cc9
 8004d1c:	08004cc9 	.word	0x08004cc9
 8004d20:	08004e6d 	.word	0x08004e6d
 8004d24:	08004cc9 	.word	0x08004cc9
 8004d28:	08004d77 	.word	0x08004d77
 8004d2c:	08004cc9 	.word	0x08004cc9
 8004d30:	08004cc9 	.word	0x08004cc9
 8004d34:	08004e0d 	.word	0x08004e0d
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6032      	str	r2, [r6, #0]
 8004d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e09c      	b.n	8004e86 <_printf_i+0x1e6>
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6031      	str	r1, [r6, #0]
 8004d54:	0606      	lsls	r6, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xbc>
 8004d58:	681d      	ldr	r5, [r3, #0]
 8004d5a:	e003      	b.n	8004d64 <_printf_i+0xc4>
 8004d5c:	0645      	lsls	r5, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xb8>
 8004d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	da03      	bge.n	8004d70 <_printf_i+0xd0>
 8004d68:	232d      	movs	r3, #45	@ 0x2d
 8004d6a:	426d      	negs	r5, r5
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d70:	230a      	movs	r3, #10
 8004d72:	4858      	ldr	r0, [pc, #352]	@ (8004ed4 <_printf_i+0x234>)
 8004d74:	e011      	b.n	8004d9a <_printf_i+0xfa>
 8004d76:	6821      	ldr	r1, [r4, #0]
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	0608      	lsls	r0, r1, #24
 8004d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d80:	d402      	bmi.n	8004d88 <_printf_i+0xe8>
 8004d82:	0649      	lsls	r1, r1, #25
 8004d84:	bf48      	it	mi
 8004d86:	b2ad      	uxthmi	r5, r5
 8004d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	bf14      	ite	ne
 8004d8e:	230a      	movne	r3, #10
 8004d90:	2308      	moveq	r3, #8
 8004d92:	4850      	ldr	r0, [pc, #320]	@ (8004ed4 <_printf_i+0x234>)
 8004d94:	2100      	movs	r1, #0
 8004d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d9a:	6866      	ldr	r6, [r4, #4]
 8004d9c:	2e00      	cmp	r6, #0
 8004d9e:	60a6      	str	r6, [r4, #8]
 8004da0:	db05      	blt.n	8004dae <_printf_i+0x10e>
 8004da2:	6821      	ldr	r1, [r4, #0]
 8004da4:	432e      	orrs	r6, r5
 8004da6:	f021 0104 	bic.w	r1, r1, #4
 8004daa:	6021      	str	r1, [r4, #0]
 8004dac:	d04b      	beq.n	8004e46 <_printf_i+0x1a6>
 8004dae:	4616      	mov	r6, r2
 8004db0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004db4:	fb03 5711 	mls	r7, r3, r1, r5
 8004db8:	5dc7      	ldrb	r7, [r0, r7]
 8004dba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dbe:	462f      	mov	r7, r5
 8004dc0:	42bb      	cmp	r3, r7
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	d9f4      	bls.n	8004db0 <_printf_i+0x110>
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d10b      	bne.n	8004de2 <_printf_i+0x142>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	07df      	lsls	r7, r3, #31
 8004dce:	d508      	bpl.n	8004de2 <_printf_i+0x142>
 8004dd0:	6923      	ldr	r3, [r4, #16]
 8004dd2:	6861      	ldr	r1, [r4, #4]
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	bfde      	ittt	le
 8004dd8:	2330      	movle	r3, #48	@ 0x30
 8004dda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004de2:	1b92      	subs	r2, r2, r6
 8004de4:	6122      	str	r2, [r4, #16]
 8004de6:	464b      	mov	r3, r9
 8004de8:	4621      	mov	r1, r4
 8004dea:	4640      	mov	r0, r8
 8004dec:	f8cd a000 	str.w	sl, [sp]
 8004df0:	aa03      	add	r2, sp, #12
 8004df2:	f7ff fee3 	bl	8004bbc <_printf_common>
 8004df6:	3001      	adds	r0, #1
 8004df8:	d14a      	bne.n	8004e90 <_printf_i+0x1f0>
 8004dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfe:	b004      	add	sp, #16
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	f043 0320 	orr.w	r3, r3, #32
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	2778      	movs	r7, #120	@ 0x78
 8004e0e:	4832      	ldr	r0, [pc, #200]	@ (8004ed8 <_printf_i+0x238>)
 8004e10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	6831      	ldr	r1, [r6, #0]
 8004e18:	061f      	lsls	r7, r3, #24
 8004e1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e1e:	d402      	bmi.n	8004e26 <_printf_i+0x186>
 8004e20:	065f      	lsls	r7, r3, #25
 8004e22:	bf48      	it	mi
 8004e24:	b2ad      	uxthmi	r5, r5
 8004e26:	6031      	str	r1, [r6, #0]
 8004e28:	07d9      	lsls	r1, r3, #31
 8004e2a:	bf44      	itt	mi
 8004e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e30:	6023      	strmi	r3, [r4, #0]
 8004e32:	b11d      	cbz	r5, 8004e3c <_printf_i+0x19c>
 8004e34:	2310      	movs	r3, #16
 8004e36:	e7ad      	b.n	8004d94 <_printf_i+0xf4>
 8004e38:	4826      	ldr	r0, [pc, #152]	@ (8004ed4 <_printf_i+0x234>)
 8004e3a:	e7e9      	b.n	8004e10 <_printf_i+0x170>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	f023 0320 	bic.w	r3, r3, #32
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	e7f6      	b.n	8004e34 <_printf_i+0x194>
 8004e46:	4616      	mov	r6, r2
 8004e48:	e7bd      	b.n	8004dc6 <_printf_i+0x126>
 8004e4a:	6833      	ldr	r3, [r6, #0]
 8004e4c:	6825      	ldr	r5, [r4, #0]
 8004e4e:	1d18      	adds	r0, r3, #4
 8004e50:	6961      	ldr	r1, [r4, #20]
 8004e52:	6030      	str	r0, [r6, #0]
 8004e54:	062e      	lsls	r6, r5, #24
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	d501      	bpl.n	8004e5e <_printf_i+0x1be>
 8004e5a:	6019      	str	r1, [r3, #0]
 8004e5c:	e002      	b.n	8004e64 <_printf_i+0x1c4>
 8004e5e:	0668      	lsls	r0, r5, #25
 8004e60:	d5fb      	bpl.n	8004e5a <_printf_i+0x1ba>
 8004e62:	8019      	strh	r1, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	4616      	mov	r6, r2
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	e7bc      	b.n	8004de6 <_printf_i+0x146>
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	2100      	movs	r1, #0
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	6032      	str	r2, [r6, #0]
 8004e74:	681e      	ldr	r6, [r3, #0]
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f859 	bl	8004f30 <memchr>
 8004e7e:	b108      	cbz	r0, 8004e84 <_printf_i+0x1e4>
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	6060      	str	r0, [r4, #4]
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e8e:	e7aa      	b.n	8004de6 <_printf_i+0x146>
 8004e90:	4632      	mov	r2, r6
 8004e92:	4649      	mov	r1, r9
 8004e94:	4640      	mov	r0, r8
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	47d0      	blx	sl
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d0ad      	beq.n	8004dfa <_printf_i+0x15a>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	079b      	lsls	r3, r3, #30
 8004ea2:	d413      	bmi.n	8004ecc <_printf_i+0x22c>
 8004ea4:	68e0      	ldr	r0, [r4, #12]
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	4298      	cmp	r0, r3
 8004eaa:	bfb8      	it	lt
 8004eac:	4618      	movlt	r0, r3
 8004eae:	e7a6      	b.n	8004dfe <_printf_i+0x15e>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	47d0      	blx	sl
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d09d      	beq.n	8004dfa <_printf_i+0x15a>
 8004ebe:	3501      	adds	r5, #1
 8004ec0:	68e3      	ldr	r3, [r4, #12]
 8004ec2:	9903      	ldr	r1, [sp, #12]
 8004ec4:	1a5b      	subs	r3, r3, r1
 8004ec6:	42ab      	cmp	r3, r5
 8004ec8:	dcf2      	bgt.n	8004eb0 <_printf_i+0x210>
 8004eca:	e7eb      	b.n	8004ea4 <_printf_i+0x204>
 8004ecc:	2500      	movs	r5, #0
 8004ece:	f104 0619 	add.w	r6, r4, #25
 8004ed2:	e7f5      	b.n	8004ec0 <_printf_i+0x220>
 8004ed4:	080050db 	.word	0x080050db
 8004ed8:	080050ec 	.word	0x080050ec

08004edc <memmove>:
 8004edc:	4288      	cmp	r0, r1
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	eb01 0402 	add.w	r4, r1, r2
 8004ee4:	d902      	bls.n	8004eec <memmove+0x10>
 8004ee6:	4284      	cmp	r4, r0
 8004ee8:	4623      	mov	r3, r4
 8004eea:	d807      	bhi.n	8004efc <memmove+0x20>
 8004eec:	1e43      	subs	r3, r0, #1
 8004eee:	42a1      	cmp	r1, r4
 8004ef0:	d008      	beq.n	8004f04 <memmove+0x28>
 8004ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004efa:	e7f8      	b.n	8004eee <memmove+0x12>
 8004efc:	4601      	mov	r1, r0
 8004efe:	4402      	add	r2, r0
 8004f00:	428a      	cmp	r2, r1
 8004f02:	d100      	bne.n	8004f06 <memmove+0x2a>
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f0e:	e7f7      	b.n	8004f00 <memmove+0x24>

08004f10 <_sbrk_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	2300      	movs	r3, #0
 8004f14:	4d05      	ldr	r5, [pc, #20]	@ (8004f2c <_sbrk_r+0x1c>)
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fc fe32 	bl	8001b84 <_sbrk>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_sbrk_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_sbrk_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	200002ac 	.word	0x200002ac

08004f30 <memchr>:
 8004f30:	4603      	mov	r3, r0
 8004f32:	b510      	push	{r4, lr}
 8004f34:	b2c9      	uxtb	r1, r1
 8004f36:	4402      	add	r2, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	d101      	bne.n	8004f42 <memchr+0x12>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e003      	b.n	8004f4a <memchr+0x1a>
 8004f42:	7804      	ldrb	r4, [r0, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	428c      	cmp	r4, r1
 8004f48:	d1f6      	bne.n	8004f38 <memchr+0x8>
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <memcpy>:
 8004f4c:	440a      	add	r2, r1
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f54:	d100      	bne.n	8004f58 <memcpy+0xc>
 8004f56:	4770      	bx	lr
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f64:	d1f9      	bne.n	8004f5a <memcpy+0xe>
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <_realloc_r>:
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	4614      	mov	r4, r2
 8004f70:	460d      	mov	r5, r1
 8004f72:	b921      	cbnz	r1, 8004f7e <_realloc_r+0x16>
 8004f74:	4611      	mov	r1, r2
 8004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	f7ff bc3b 	b.w	80047f4 <_malloc_r>
 8004f7e:	b92a      	cbnz	r2, 8004f8c <_realloc_r+0x24>
 8004f80:	f7ff fbce 	bl	8004720 <_free_r>
 8004f84:	4625      	mov	r5, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f8c:	f000 f81a 	bl	8004fc4 <_malloc_usable_size_r>
 8004f90:	4284      	cmp	r4, r0
 8004f92:	4606      	mov	r6, r0
 8004f94:	d802      	bhi.n	8004f9c <_realloc_r+0x34>
 8004f96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f9a:	d8f4      	bhi.n	8004f86 <_realloc_r+0x1e>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff fc28 	bl	80047f4 <_malloc_r>
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	b908      	cbnz	r0, 8004fac <_realloc_r+0x44>
 8004fa8:	4645      	mov	r5, r8
 8004faa:	e7ec      	b.n	8004f86 <_realloc_r+0x1e>
 8004fac:	42b4      	cmp	r4, r6
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	bf28      	it	cs
 8004fb4:	4632      	movcs	r2, r6
 8004fb6:	f7ff ffc9 	bl	8004f4c <memcpy>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	f7ff fbaf 	bl	8004720 <_free_r>
 8004fc2:	e7f1      	b.n	8004fa8 <_realloc_r+0x40>

08004fc4 <_malloc_usable_size_r>:
 8004fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc8:	1f18      	subs	r0, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfbc      	itt	lt
 8004fce:	580b      	ldrlt	r3, [r1, r0]
 8004fd0:	18c0      	addlt	r0, r0, r3
 8004fd2:	4770      	bx	lr

08004fd4 <fmaxf>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	460d      	mov	r5, r1
 8004fda:	f000 f811 	bl	8005000 <__fpclassifyf>
 8004fde:	b910      	cbnz	r0, 8004fe6 <fmaxf+0x12>
 8004fe0:	462c      	mov	r4, r5
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f80a 	bl	8005000 <__fpclassifyf>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0f8      	beq.n	8004fe2 <fmaxf+0xe>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f7fb fb74 	bl	80006e0 <__aeabi_fcmpgt>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d0f1      	beq.n	8004fe0 <fmaxf+0xc>
 8004ffc:	e7f1      	b.n	8004fe2 <fmaxf+0xe>
	...

08005000 <__fpclassifyf>:
 8005000:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8005004:	d00d      	beq.n	8005022 <__fpclassifyf+0x22>
 8005006:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800500a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800500e:	d30a      	bcc.n	8005026 <__fpclassifyf+0x26>
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <__fpclassifyf+0x30>)
 8005012:	1e42      	subs	r2, r0, #1
 8005014:	429a      	cmp	r2, r3
 8005016:	d908      	bls.n	800502a <__fpclassifyf+0x2a>
 8005018:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800501c:	4258      	negs	r0, r3
 800501e:	4158      	adcs	r0, r3
 8005020:	4770      	bx	lr
 8005022:	2002      	movs	r0, #2
 8005024:	4770      	bx	lr
 8005026:	2004      	movs	r0, #4
 8005028:	4770      	bx	lr
 800502a:	2003      	movs	r0, #3
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	007ffffe 	.word	0x007ffffe

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
